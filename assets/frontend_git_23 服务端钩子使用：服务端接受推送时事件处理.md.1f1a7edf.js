import{_ as s,o as a,c as n,U as l}from"./chunks/framework.76b79cb5.js";const e="/assets/5e9d4799000186af20260710.2691e4c5.png",p="/assets/5e9d47aa00019d8312260292.6990d761.png",o="/assets/5e9d47b10001bfd213240428.90830b92.png",t="/assets/5e9d47b70001fa9b05850112.389ff82a.png",c="/assets/5e9d47bd0001a68612660428.439308b8.png",r="/assets/5e9d47c20001346c12660428.f56fa09d.png",i="/assets/5e9d47c90001cb1406830231.29490693.png",d="/assets/5e9d47d20001c40617500570.d2a9df60.png",D="/assets/5e9d47d80001dbb716040496.997b261e.png",y="/assets/5e9d47dd0001465f12960496.dd8c8284.png",C="/assets/5e9d47e300012f6908720265.a172b562.png",m="/assets/5e9d47ee0001112d14360632.a7bd056e.png",P=JSON.parse('{"title":"23 服务端钩子使用：服务端接受推送时事件处理","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/23 服务端钩子使用：服务端接受推送时事件处理.md","filePath":"frontend/git/23 服务端钩子使用：服务端接受推送时事件处理.md"}'),F={name:"frontend/git/23 服务端钩子使用：服务端接受推送时事件处理.md"},A=l('<h1 id="_23-服务端钩子使用-服务端接受推送时事件处理" tabindex="-1">23 服务端钩子使用：服务端接受推送时事件处理 <a class="header-anchor" href="#_23-服务端钩子使用-服务端接受推送时事件处理" aria-label="Permalink to &quot;23 服务端钩子使用：服务端接受推送时事件处理&quot;">​</a></h1><p>在上一节中，我们学习了客户端钩子使用，在这一节中我们继续学习服务端的钩子使用，服务端钩子同样存放在<code>.git</code>目录下，不过是放在服务端的<code>.git</code>目录下，钩子文件名称也有相对应的文件名，但这里并不需要大家去记，因为我们平时使用服务端钩子基本不会通过文件名去找对应的钩子。</p><p>通常搭建 Git 服务器后，并不需要我们登陆服务器去编辑 .git/hooks 目录下的钩子，而是在 web 页面中设置，在这节中我们以使用者角度去讲解钩子使用方法，只需要在 web 管理界面设置钩子地址即可。</p><h2 id="_23-1-设置钩子事件" tabindex="-1">23.1 设置钩子事件 <a class="header-anchor" href="#_23-1-设置钩子事件" aria-label="Permalink to &quot;23.1 设置钩子事件&quot;">​</a></h2><p>我们依然以码云平台为例，在码云平台中设置服务端钩子需要找到仓库的<code>管理</code>-&gt;<code>WebHooks</code>-&gt;<code>增加</code>页面，然后将我们的 URL 地址准备好就可以了。</p><p>当我们使用<code>git push</code>命令推送代码到码云平台时候，码云接收成功就会调用我们此 URL 地址，并将事件的参数传递到设置的 URL 地址中，设置钩子方法如下图所示： <img src="'+e+'" alt="图片描述"></p><p>在上图中，我们在 WebHook 中填写了一个外网可访问的 URL 地址，这个地址的后端使用何种语言都可以，只要能接收参数并执行代码即可，我们的钩子操作将在这份代码里面实现。</p><h2 id="_23-2-分析钩子参数" tabindex="-1">23.2 分析钩子参数 <a class="header-anchor" href="#_23-2-分析钩子参数" aria-label="Permalink to &quot;23.2 分析钩子参数&quot;">​</a></h2><p>在设置好钩子地址之后，在编写钩子代码之前，我需要知道码云平台会将哪些参数给我传递过来，才好进行下一步编写。因此我在编写钩子代码最开始的位置，会先将参数接收，然后保存到本地，用来分析钩子的参数结构。</p><blockquote><p>大家在实践我这个实验的时候，需要在你的服务器中安装 PHP 运行环境，每个系统的安装方法有一定的区别，这篇文章不展开怎么安装 PHP+Nginx 环境了。</p></blockquote><p>下面是我用 PHP 代码实现钩子的接收，我这里使用 vim 去编辑 PHP 代码文件，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>vim 命令执行之后，我需要在里面编写钩子所执行的具体代码，如下图所示： <img src="'+p+`" alt="图片描述"> 在上图当中，我用 PHP 语言编写，首先接收了码云传递过来的参数，然后将参数写入到文件当中，为了方便大家做实验：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">file_get_contents</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">php://input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//存储日志信息</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">file_put_contents</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/tmp/gitee.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,$</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">json_decode</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">,true);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>钩子代码准备完毕之后，我们回到本地代码仓库，在仓库中修改代码，然后提交新版本并推送到码云中，码云便会调用我们的钩子接口，修改代码命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">a.txt</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="`+o+'" alt="图片描述"> 在上图中，可以看到文件<code>a.txt</code>处于新增状态，接着我们将此文件通过<code>git commit</code>提交到新版本当中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;服务端钩子测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示： <img src="'+t+'" alt="图片描述"> 在上图中，可以看到已经将新增加的文件添加到版本控制器当中，我们可以使用<code>git log</code>命令查看一下版本列表，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的版本信息如下图所示： <img src="'+c+'" alt="图片描述"> 在上图中我们可以看出已经新增版本成功， 接着我们使用<code>git push</code>推送到码云平台中，推送后码云便会调用我们的钩子事件，推送到远程仓库的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，远端返回的信息如下所示： <img src="'+r+'" alt="图片描述"> 在图中我们可以看到码云平台接收推送的数据已经成功，推送完成之后，我们去钩子所在的服务器查看参数是否被打印出来，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cat /tmp/gitee.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，如果提示文件不存在，那么可能你填写在码云的 URL 地址不正确，可以先自己打开 URL 尝试是否能打开；如果执行之后能查看到里面的参数，就说明钩子调用成功，如下图所示： <img src="'+i+'" alt="图片描述"> 在上图中可以看到一串 Json 格式的数据，我们将内容复制出来，然后去<a href="http://www.box3.cn/" target="_blank" rel="noreferrer">开发工具箱</a>点击通用代码美化，就会将压缩的Json数据格式化出来，便于我们分析， 如下图所示： <img src="'+d+'" alt="图片描述"> 在上图中，可以看到很多个参数，其中<code>after</code>和<code>before</code>参数分别代表是接收推送之前的 commitid 和接收之后的commitid，在我们这个钩子中暂时不需要用到这两个。</p><h2 id="_23-3-编写钩子代码" tabindex="-1">23.3 编写钩子代码 <a class="header-anchor" href="#_23-3-编写钩子代码" aria-label="Permalink to &quot;23.3 编写钩子代码&quot;">​</a></h2><p>在最上方有一个<code>ref</code>参数，我们可以用来判断提交的分支是哪一个，比如我们只在 master 分支收到推送的时候才更新，那么就可以判断值里面是否包含<code>master</code>，根据需要分析了钩子的参数之后，我们就可以继续编写钩子的代码了，在这里需要注意：</p><blockquote><p>后台的程序一定要有操作 Git 的权限，Nginx 运行和 PHP 的运行用户与当前登陆的账户是否一致。</p></blockquote><p>现在我们先手动新建目录，并且把码云仓库的代码克隆下来，执行的命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/data/code</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@gitee.com:songboy/test201907.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示： <img src="'+D+'" alt="图片描述"> 在上图中可以看到远程仓库的代码已经被克隆到本地了，接着我们开始编写钩子代码，这里我使用 vim 编辑器去编辑，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，会出现一个 vim 提供的编辑界面，我们在里面编写代码，如下图所示： <img src="'+y+`" alt="图片描述"> 为了大家调试方便，我将上图中的代码复制了下来，参考代码如下所示：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">file_get_contents</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">php://input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//存储日志信息</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">file_put_contents</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/tmp/gitee.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,$</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">json_decode</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">,true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果推送的分支是master，则更新代码</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">strpos</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">shell_exec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd /data/code/test201907 &amp;&amp;  git pull 2&lt;&amp;1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>代码逻辑比较简单，首先是接收参数，然后将参数使用<code>json_decode</code>函数转换为数组，在判断参数<code>ref</code>中是否包含了<code>master</code>字符，如果包含说明推送的分支是<code>master</code>分支，那么就进入刚才克隆代码的目录，并执行<code>git pull</code>命令。</p><h2 id="_23-4-验证钩子效果" tabindex="-1">23.4 验证钩子效果 <a class="header-anchor" href="#_23-4-验证钩子效果" aria-label="Permalink to &quot;23.4 验证钩子效果&quot;">​</a></h2><p>钩子代码写完之后，我们回到本地的开发仓库，重新修改代码，提交新版本并推送到远程仓库中，执行命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">daxia</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">c.txt</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">推送服务端钩子测试V2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示： <img src="`+C+'" alt="图片描述"> 在上图中可以看到已经将新版本推送到码云平台中，推送后，码云平台依然会调用我们的 URL 地址，然后我们 URL 对应的钩子事件会被执行，执行后会拉取最新代码到本地，现在我们进入刚才新建的仓库目录，并查看版本记录，执行命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/data/code/test201907</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示： <img src="'+m+'" alt="图片描述"> 在上图中可以看到我们在本地仓库推送到码云的新版本已经被钩子拉取下来。</p><p>如果发现仓库版本并没有变更，你可以按照以下 2 步骤进行检查：</p><blockquote><ol><li>本地版本是否成功推送到码云平台</li><li>码云平台设置的钩子地址是否能被公网所访问</li><li>钩子增加访问日志，查看码云是否访问到钩子</li><li>手动执行<code>git pull</code>命令是否能拉取代码</li><li>检查钩子需要操作仓库的位置文件夹的权限是否足够</li><li>使用<code>ps -ef</code>命令检查运行钩子的账户，是否有权限拉取 Git 仓库</li></ol></blockquote><h2 id="_23-5-小结" tabindex="-1">23.5 小结 <a class="header-anchor" href="#_23-5-小结" aria-label="Permalink to &quot;23.5 小结&quot;">​</a></h2><p>在这一节当中，我们主要学习服务端钩子的使用方法，主要有以下 3 个步骤：</p><ol><li>在 Git 服务端的 web 页面中设置一个钩子地址，需要公网可访问</li><li>编写钩子代码，支持各种语言，根据需要可以分析钩子的参数</li><li>验证钩子运行效果，通常大部分不成功的原因是因为权限不正确</li></ol>',46),b=[A];function u(g,h,_,v,f,k){return a(),n("div",null,b)}const q=s(F,[["render",u]]);export{P as __pageData,q as default};

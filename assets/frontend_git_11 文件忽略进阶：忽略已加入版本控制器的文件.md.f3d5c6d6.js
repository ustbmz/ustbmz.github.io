import{_ as e,o as a,c as s,U as t}from"./chunks/framework.76b79cb5.js";const n="/assets/5e9d3be90001a7b711140428.ae3b3f8a.png",i="/assets/5e9d3bf30001f20813100700.6827e1ef.png",o="/assets/5e9d3bfb0001149a13100462.8e8103dc.png",p="/assets/5e9d3c020001892013100666.ace77a4b.png",c="/assets/5e9d3c0c000127a213100666.572fd380.png",l="/assets/5e9d3c1300017b6713100394.49c60392.png",r="/assets/5e9d3c180001676b13100564.14b6675a.png",d="/assets/5e9d3c1f000115f314640666.c73b78ed.png",m="/assets/5e9d3c2500011ffd14640326.ecbc6f49.png",g="/assets/5e9d3c3500012b1214640496.ddde8ad3.png",h="/assets/5e9d3c3d0001f39414640666.ad682066.png",u="/assets/5e9d3c440001a18014640530.7a231dd6.png",D=JSON.parse('{"title":"11 文件忽略进阶：忽略已加入版本控制器的文件","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/11 文件忽略进阶：忽略已加入版本控制器的文件.md","filePath":"frontend/git/11 文件忽略进阶：忽略已加入版本控制器的文件.md"}'),_={name:"frontend/git/11 文件忽略进阶：忽略已加入版本控制器的文件.md"},b=t('<h1 id="_11-文件忽略进阶-忽略已加入版本控制器的文件" tabindex="-1">11 文件忽略进阶：忽略已加入版本控制器的文件 <a class="header-anchor" href="#_11-文件忽略进阶-忽略已加入版本控制器的文件" aria-label="Permalink to &quot;11 文件忽略进阶：忽略已加入版本控制器的文件&quot;">​</a></h1><p>在前面我们学习了常见的忽略文件操作方法，大多数情况下已经满足日常使用，但有时候也会有一些特殊需求，用之前的方法并不好处理。</p><p>比如说，想忽略某一个文件夹下的绝大多数文件，保留个别文件；再比如：已经加入到版本控制器的文件，再去设置忽略规则不起效果等问题，这些问题通过本节内容，你可以轻松的搞定，主要内容有：设置忽略排除、忽略已提交的文件。</p><h2 id="_11-1-设置忽略排除" tabindex="-1">11.1 设置忽略排除 <a class="header-anchor" href="#_11-1-设置忽略排除" aria-label="Permalink to &quot;11.1 设置忽略排除&quot;">​</a></h2><p>按照前面所学的知识，在设置文件忽略时候，我们会在<code>.gitignore</code>文件中将要忽略的目录添加进去，比如，在你的项目中如果使用了composer，那么通常会产生一个 vendor 文件夹，这个文件夹通常是由 composer 管理，所以一般我们会在<code>.gitignore</code>文件添加路径忽略它，如下图编辑 .gitignore 文件所示。</p><h3 id="_11-1-1-忽略文件夹" tabindex="-1">11.1.1 忽略文件夹 <a class="header-anchor" href="#_11-1-1-忽略文件夹" aria-label="Permalink to &quot;11.1.1 忽略文件夹&quot;">​</a></h3><p><img src="'+n+'" alt="图片描述"> 在图中可以看到，路径中会设置星号，这是表示匹配所有文件（<strong>因为后续需要排除此文件夹下的某个文件，所以这里的星号一定要加上</strong>），保存修改后，我们再回到终端交互中，查看当前文件的修改，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回结果如下图所示： <img src="'+i+'" alt="图片描述"> 在图中可以看到 Git 并没有提示我们新添加了一个 test 文件夹，说明成功忽略了<code>test</code>文件夹以及下面的文件。</p><h3 id="_11-1-2-设置反向排除" tabindex="-1">11.1.2 设置反向排除 <a class="header-anchor" href="#_11-1-2-设置反向排除" aria-label="Permalink to &quot;11.1.2 设置反向排除&quot;">​</a></h3><p>接下来我们再次去编辑 <code>.gitignore</code> 文件，设置忽略规则里面加上排除规则，参考规则如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">!/test/index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 vim 编辑界面如下图所示： <img src="'+o+'" alt="图片描述"> 在图中的<code>!</code>表示要排除的意思，因此在<code>.gitignore</code>文件夹中加入<code>!</code>也可以理解为取反的意思。</p><h3 id="_11-1-3-反向排除结果验证" tabindex="-1">11.1.3 反向排除结果验证 <a class="header-anchor" href="#_11-1-3-反向排除结果验证" aria-label="Permalink to &quot;11.1.3 反向排除结果验证&quot;">​</a></h3><p>接着我们保存修改，然后回到终端进行交互，再次使用 Git 的查看文件状态命令，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果如下图所示： <img src="'+p+'" alt="图片描述"> 在图中可以看到 Git 提示新增了一个 <code>test</code> 文件夹，这便是因为我们刚才对 <code>test/index.php</code> 文件设置反向忽略规则，所以此时 <code>test</code> 文件夹依然会显示出来，此时设置反向忽略就成功实现了。</p><h2 id="_11-2-忽略已提交文件" tabindex="-1">11.2 忽略已提交文件 <a class="header-anchor" href="#_11-2-忽略已提交文件" aria-label="Permalink to &quot;11.2 忽略已提交文件&quot;">​</a></h2><p>有的时候，可能一不小心把某一个原本应该忽略的目录提交到了版本控制器中，再使用 <code>.gitignore</code> 文件去忽略它的时候，发现无论如何都无法再次将其忽略，只好默默忍受；其实这是因为 Git 已经索引了该文件而导致，接下来我带着大家复现并解决此问题。</p><h3 id="_11-2-1-问题复现" tabindex="-1">11.2.1 问题复现 <a class="header-anchor" href="#_11-2-1-问题复现" aria-label="Permalink to &quot;11.2.1 问题复现&quot;">​</a></h3><p>我先来让这个问题复现，让大家感受一下这个问题，首先我在版本库中创建一个目录并新增一个文件，提交文件到版本控制器中，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mkdir test2 &amp;&amp; echo &#39;1231&#39; &gt; test2/test.txt &amp;&amp; git add . &amp;&amp; git commit . -m ;测试忽略已提交的文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果如下图所示： <img src="'+c+'" alt="图片描述"> 通过图中可以看出，我新增了一个目录和文件，并提交到版本库成功。</p><p>接着我在<code>.gitignore</code>文件中加入，忽略规则，规则参考如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">test2/*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 vim 编辑 <code>.gitignore</code> 文件如下图所示： <img src="'+l+'" alt="图片描述"></p><p>增加忽略规则之后，使用 <code>:wq</code> 命令保存，并回到终端交互窗口中，然后去修改我们刚才要忽略的文件，修改之后再查看 Git 会不会提示刚才设置了忽略的文件的修改，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo ‘添加到忽略文件后再次修改’ &gt;&gt; test2/test.txt &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回结果如下图所示： <img src="'+r+'" alt="图片描述"> 在图中依然可以看到已经设置了忽略的文件，Git 依然提示该文件被修改。</p><h3 id="_11-2-2-忽略已存在的文件" tabindex="-1">11.2.2 忽略已存在的文件 <a class="header-anchor" href="#_11-2-2-忽略已存在的文件" aria-label="Permalink to &quot;11.2.2 忽略已存在的文件&quot;">​</a></h3><p>遇到上面这种情况时候，我们需要先删除掉该文件的缓存，才能让它成功忽略，所以正确的操作步骤是先在 <code>.gitignore</code> 中设置该文件为忽略，然后执行删除缓存命令，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rm --cached test2/index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令之后，再使用 git status 查看是否成功忽略，结果如下所示： <img src="'+d+'" alt="图片描述"> 可以看到 <code>test2/test.txt</code> 已经不再提示被修改了，说明成功了。</p><h3 id="_11-2-3-忽略已存在的文件夹" tabindex="-1">11.2.3 忽略已存在的文件夹 <a class="header-anchor" href="#_11-2-3-忽略已存在的文件夹" aria-label="Permalink to &quot;11.2.3 忽略已存在的文件夹&quot;">​</a></h3><p>忽略已存在的文件夹的方式和上面基本一致，我现在模拟一个已经存在的文件夹，如下图所示： <img src="'+m+'" alt="图片描述"></p><p>然后编辑 <code>.gitignore</code> 文件，在文件中加入要忽略文件夹，如下图所示： <img src="'+g+'" alt="图片描述"></p><p>然后使用删除该文件夹的缓存，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rm -r --cached test3/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，同样适用<code>git status</code>查看当前的工作区状态，返回结果如下图所示： <img src="'+h+'" alt="图片描述"> 在图中可以看到 test3 文件夹已经从缓存中删除了。</p><p>接着我们需要将此修改提交，因为在忽略文件里已经忽略了该文件夹，所以在提交的时候需要注意加上<code>-f</code>参数，表示强制添加，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add -f test3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果如下图所示： <img src="'+u+'" alt="图片描述"> 在图中已经看不到 <code>test3</code> 文件夹的修改信息，说明忽略已存在的文件夹也成功了。</p><h2 id="_11-3-小结" tabindex="-1">11.3 小结 <a class="header-anchor" href="#_11-3-小结" aria-label="Permalink to &quot;11.3 小结&quot;">​</a></h2><p>在这一节中，我们更进一步的学习了如何处理需要忽略的文件，主要内容有反向忽略规则，和忽略已加入版本控制器的文件，有两点需要注意：</p><ol><li>反向忽略应用场景是该文件夹大部分文件需要被忽略，只需要保留少部分的文件</li><li>忽略已存在的文件夹最后一步需要使用 <code>-f</code> 进行强制添加，否则会提示操作失败</li></ol>',45),v=[b];function C(f,y,k,q,A,x){return a(),s("div",null,v)}const w=e(_,[["render",C]]);export{D as __pageData,w as default};

import{_ as e,o as s,c as a,U as n}from"./chunks/framework.76b79cb5.js";const i="/assets/5e9d4ca80001060c15740326.ed1daf86.png",t="/assets/5e9d4caf00019a4415740190.8a0a46be.png",p="/assets/5e9d4cb70001037915740530.080b7527.png",l="/assets/5e9d4cbe0001d96915740190.7d48ddda.png",c="/assets/5e9d4cc5000168ae15740156.d4b3cd37.png",o="/assets/5e9d4ccb0001851515740802.e4895b00.png",r="/assets/5e9d4cd100012aaa15740632.fa6a40f8.png",d="/assets/5e9d4cd700012e7415740156.1aab3685.png",m="/assets/5e9d4cdd0001dce815740122.5ebcd486.png",b="/assets/5e9d4ce500011d4115740428.73d83441.png",u="/assets/5e9d4cec000163be17140292.b873f1b6.png",g="/assets/5e9d4cf20001faa717140156.a5095c0e.png",h="/assets/5e9d4cfa0001b2e219100632.cf76498e.png",_="/assets/5e9d4d030001b21615880122.9bb8817d.png",v="/assets/5e9d4d0b00019e4619100632.5fcd9987.png",C="/assets/5e9d4d130001441719100326.42f3f756.png",y="/assets/5e9d4d1900012ebb19100326.07bf3804.png",f="/assets/5e9d4d20000154e219100428.95001201.png",z=JSON.parse('{"title":"29 历史记录清理：保留代码并删除一年前的提交记录","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/29 历史记录清理：保留代码并删除一年前的提交记录.md","filePath":"frontend/git/29 历史记录清理：保留代码并删除一年前的提交记录.md"}'),A={name:"frontend/git/29 历史记录清理：保留代码并删除一年前的提交记录.md"},G=n('<h1 id="_29-历史记录清理-保留代码并删除一年前的提交记录" tabindex="-1">29 历史记录清理：保留代码并删除一年前的提交记录 <a class="header-anchor" href="#_29-历史记录清理-保留代码并删除一年前的提交记录" aria-label="Permalink to &quot;29 历史记录清理：保留代码并删除一年前的提交记录&quot;">​</a></h1><p>Git 仓库使用久了之后会发现响应会越来越慢，占用的存储空间也会越来越大，出现这些问题的原因是因为 Git 会将我们代码的所有历史版本都会存储起来，当我们代码迭代了上千个版本之后就会占用很大的空间。</p><p>为了让 Git 的响应速度能够快点，我们可以通过一些方式减少 Git 仓库的存储空间，这一节当中主要教大家三种方式，分别是：克隆最后一个版本、清空版本记录、清理大文件等。</p><h2 id="_29-1-克隆最后一个版本" tabindex="-1">29.1 克隆最后一个版本 <a class="header-anchor" href="#_29-1-克隆最后一个版本" aria-label="Permalink to &quot;29.1 克隆最后一个版本&quot;">​</a></h2><p>我们在克隆一个使用了很久的 Git 仓库时候可能会发现耗费的时间非常长，这是因为 Git 会拉取所有的历史版本导致，如果我们想让 Git 在克隆代码的时候快一些，可以在<code>git clone</code>命令行后面加<code>--depth=1</code>参数，这样 Git 在克隆代码时候只会克隆最后一个版本的内容，这里我执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git clone https://gitee.com/songboy/test201907.git  tempdemo --depth==1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 克隆返回的信息如下图所示： <img src="'+i+'" alt="图片描述"> 在上图中可以看到克隆已经完成，而且我在等待克隆完成的这个时间也非常短，接着我进入 Git 仓库，看看里面的代码是否已经克隆下来，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd tempdemo &amp;&amp; ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件如下图所示： <img src="'+t+'" alt="图片描述"> 在上图中可以看到文件也都存在，我们再通过<code>git log</code>命令看看版本列表是否完整，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 版本列表如下图所示： <img src="'+p+'" alt="图片描述"> 在上图中可以看到只有一个版本记录，说明<code>--depth==1</code>参数是可用的。</p><h2 id="_29-2-清空版本记录" tabindex="-1">29.2 清空版本记录 <a class="header-anchor" href="#_29-2-清空版本记录" aria-label="Permalink to &quot;29.2 清空版本记录&quot;">​</a></h2><p>上面一个例子只能解决本地仓库的占用大小，但是服务端依然保存了所以的版本记录，如果想把远程的仓库也进行清理，可以看看下面的方法，首先我们切换到<code>develop</code>分支中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd ../test201907  &amp;&amp; git checkout  develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+l+'" alt="图片描述"> 在上图中可以看到已经切换到<code>develop</code>分支当中。</p><p>接着我们创建一个新分支，不过在创建的时候我们需要加上一个<code>--orphan</code>参数，加上这个参数之后创建的分支有点特殊，他只有最后一个版本，而不是把所有的版本都复制过来，严格来说创建出来的不是分支，但很像分支，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout --orphan new_branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+c+'" alt="图片描述"> 在上图中可以看到已经创建了一个<code>new_branch</code>分支成功，接着我们将这个特殊的分支里面的文件都添加进来，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add -A  &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中可以看到所有的文件都处于待添加状态，我们将这些文件使用<code>commit</code>命令提交到一个版本当中去，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit -m &quot;new version&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+r+'" alt="图片描述"> 在上图中可以看到提交成功，并生成了一个版本记录，接着我们将原来的<code>develop</code>分支删除，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -D develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+d+'" alt="图片描述"> 在上图中可以看到已经将 <code>develop</code> 分支删除成功，接着我们在将当前所在的<code>new_branch</code>分支改名为<code>develop</code>，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -m develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+m+'" alt="图片描述"> 在上图中可以看到已经将分支改名成功，接着我们使用<code>git push -f</code>命令将本地仓库强制推送到远程仓库当中，这里需要注意：</p><blockquote><p>有些仓库有 master 分支保护，不允许强制push，需要在远程仓库项目里暂时把项目保护关掉才能推送</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push -f origin develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 远程仓库返回的信息如下图所示： <img src="'+b+'" alt="图片描述"> 在上图中可以看到强制推送到远程的<code>develop</code>分支已经成功，此时我们已经将远程的历史版本记录给覆盖。</p><h2 id="_29-3-清理大文件" tabindex="-1">29.3 清理大文件 <a class="header-anchor" href="#_29-3-清理大文件" aria-label="Permalink to &quot;29.3 清理大文件&quot;">​</a></h2><p>上面一小节中，我们可以通过清理版本库来减少 Git 存储的空间，但有时候我们需要保留历史版本记录，但又想减少 Git 存储空间，这个时候我们就可以考虑清理一些大文件。</p><p>Git 本身也给我们提供了解决方案，使用<code>git branch-filter</code>可以遍历 Git 的版本历史信息, 然后从历史版本信息中删除大文件，最终 Git 仓库空间减少，在下面的命令中会涉及到很多 Linux 命令，这些命令我们不用细究，按照步骤执行即可。</p><blockquote><p>演示出效果需要一个使用比较久，而且里面有大文件的仓库，这里我以我们公司的一个仓库为例来演示。</p></blockquote><p>现在需要找出大文件的对应 hash 值，这里我们找出前 5 个为例，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，过滤后的 Git 返回信息如下图所示： <img src="'+u+'" alt="图片描述"> 在上图中，可以看到 5 行记录，其中第 3 列代表文件占用空间大小，我们随意挑选一个 hash 值为例，将这个值<code>6ba572e5b6b9237a29bd883595e82f5a48e62a66</code>复制到剪贴板，然后根据 hash 值找到对应大文件名，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rev-list --objects --all | grep 6ba572e5b6b9237a29bd883595e82f5a48e62a66</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的过滤后信息如下图所示： <img src="'+g+'" alt="图片描述"> 在上图中可以看到这个 hash 所对应的文件为<code>vendor.zip</code>文件，从文件名可以看出这是一个压缩包，我们要清除这个文件所有历史中的记录，并强制刷新到所有分支，这里推送到远程仓库需要有强制推送权限。执行删除<code>vendor.zip</code>文件，并清除在所有历史版本中的记录命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git filter-branch --index-filter &#39;git rm --cached --ignore-unmatch vendor.zip&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+h+'" alt="图片描述"> 在上图中可以看到当前仓库有 1584 个版本记录，已经全部删除完毕；在上面的命令中我们删除了文件, 但是在 Git 的 repo 里面还记录了这些文件的信息，这些信息也会占用一定的空间，我们继续清除这些信息，并收回存储空间，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">rm -rf .git/refs/original/  &amp;&amp; git reflog expire --expire=now --all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+_+'" alt="图片描述"> 在清除多余信息之后，我们需要重新建立文件与 Git 仓库的关联关系，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fsck --full --unreachable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回信息如下图所示： <img src="'+v+'" alt="图片描述"> 接着我们需要重新压缩代码，减少仓库体积：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git repack -A -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示： <img src="'+C+'" alt="图片描述"> 在上图中可以看到压缩任务已经执行完成，最后可以通过 Git 的<code>GC</code> 清理一些垃圾数据，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git gc --aggressive --prune=now</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+y+'" alt="图片描述"> 在上图中可以看到已经回收完成，总记录表有 38091 个对象，可用的只有 14563，其余的便被回收了，刚才这些操作都是在本地，如果我们想让远程仓库也清理，可以强制推送到远程仓库，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push --force origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+f+'" alt="图片描述"> 在上图中可以看到已经推送到远程仓库成功。</p><h2 id="_29-4-小结" tabindex="-1">29.4 小结 <a class="header-anchor" href="#_29-4-小结" aria-label="Permalink to &quot;29.4 小结&quot;">​</a></h2><p>在这一节当中主要学习了如何让 Git 仓库廋身，以达到让 Git仓库 响应速度变快的同时也减少占用仓库的空间。</p><p>导致 Git 仓库太大的原因，通常是因为有大文件和迭代版本次数过多导致，前者我们尽量不要把大文件放到存储空间中去，后者的话很难避免，不过我们可以定期清理版本记录。</p>',53),k=[G];function w(D,q,x,P,T,S){return s(),a("div",null,k)}const N=e(A,[["render",w]]);export{z as __pageData,N as default};

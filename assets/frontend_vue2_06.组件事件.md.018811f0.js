import{_ as t,o as a,c as e,U as s}from"./chunks/framework.76b79cb5.js";const n="/assets/20201113130301.dcd36114.png",d="/assets/20201113133827.3b199d5a.png",r="/assets/20201113134051.309e5c95.png",o="/assets/20201113134557.fea6982e.png",f=JSON.parse('{"title":"Pager组件","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/vue2/06.组件事件.md","filePath":"frontend/vue2/06.组件事件.md"}'),l={name:"frontend/vue2/06.组件事件.md"},i=s('<h1 id="pager组件" tabindex="-1">Pager组件 <a class="header-anchor" href="#pager组件" aria-label="Permalink to &quot;Pager组件&quot;">​</a></h1><img src="'+n+'" style="zoom:50%;"><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>current</td><td>当前页码</td><td>Number</td><td>否</td><td>1</td></tr><tr><td>total</td><td>总数据量</td><td>Number</td><td>否</td><td>0</td></tr><tr><td>limit</td><td>页容量</td><td>Number</td><td>否</td><td>10</td></tr><tr><td>visibleNumber</td><td>可见页码数</td><td>Number</td><td>否</td><td>10</td></tr></tbody></table><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>pageChange</td><td>页码变化</td><td>新的页码</td><td>Number</td></tr></tbody></table><h1 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h1><ol><li><p><strong>全局样式</strong></p></li><li><p><strong>v-if 和 v-show</strong></p><p><img src="'+d+'" alt="image-20201113133827438"></p><hr><p><img src="'+r+`" alt="image-20201113134051281"></p><p><strong>面试题：v-if 和 v-show 有什么区别？</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">v-if能够控制是否生成vnode，也就间接控制了是否生成对应的dom。当v-if为true时，会生成对应的vnode，并生成对应的dom元素；当其为false时，不会生成对应的vnode，自然不会生成任何的dom元素。</span></span>
<span class="line"><span style="color:#A6ACCD;">v-show始终会生成vnode，也就间接导致了始终生成dom。它只是控制dom的display属性，当v-show为true时，不做任何处理；当其为false时，生成的dom的display属性为none。</span></span>
<span class="line"><span style="color:#A6ACCD;">使用v-if可以有效的减少树的节点和渲染量，但也会导致树的不稳定；而使用v-show可以保持树的稳定，但不能减少树的节点和渲染量。</span></span>
<span class="line"><span style="color:#A6ACCD;">因此，在实际开发中，显示状态变化频繁的情况下应该使用v-show，以保持树的稳定；显示状态变化较少时应该使用v-if，以减少树的节点和渲染量。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>组件事件</strong></p><img src="`+o+'" alt="image-20201113134557175" style="zoom:40%;"><p>抛出事件：子组件在某个时候发生了一件事，但自身无法处理，于是通过事件的方式通知父组件处理</p><p>事件参数：子组件抛出事件时，传递给父组件的数据</p><p>注册事件：父组件申明，当子组件发生某件事的时候，自身将做出一些处理</p></li></ol>',8),p=[i];function h(c,m,_,b,u,g){return a(),e("div",null,p)}const y=t(l,[["render",h]]);export{f as __pageData,y as default};

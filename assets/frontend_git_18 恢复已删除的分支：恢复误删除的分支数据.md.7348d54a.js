import{_ as e,o as a,c as s,U as t}from"./chunks/framework.76b79cb5.js";const n="/assets/5e9d436b0001a1ea10280292.6d33f708.png",i="/assets/5e9d43720001d46c10280156.3bd3c3a7.png",o="/assets/5e9d437900015f9e13920360.864d8044.png",c="/assets/5e9d439500011c8314480224.4793485b.png",l="/assets/5e9d439e0001354711820190.883067fa.png",p="/assets/5e9d43a60001345611820156.53bd37ee.png",d="/assets/5e9d43ab0001ae9e11820156.7dba0a49.png",r="/assets/5e9d43b30001d05a18680496.458af911.png",m="/assets/5e9d43b90001cd3711260156.c212f56b.png",g="/assets/5e9d43c000017f4f12520598.c3996692.png",D=JSON.parse('{"title":"18 恢复已删除的分支：恢复误删除的分支数据","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/18 恢复已删除的分支：恢复误删除的分支数据.md","filePath":"frontend/git/18 恢复已删除的分支：恢复误删除的分支数据.md"}'),b={name:"frontend/git/18 恢复已删除的分支：恢复误删除的分支数据.md"},h=t('<h1 id="_18-恢复已删除的分支-恢复误删除的分支数据" tabindex="-1">18 恢复已删除的分支：恢复误删除的分支数据 <a class="header-anchor" href="#_18-恢复已删除的分支-恢复误删除的分支数据" aria-label="Permalink to &quot;18 恢复已删除的分支：恢复误删除的分支数据&quot;">​</a></h1><p>在使用 Git 的过程中，有时可能会有一些错误操作，造成分支被删除或者丢失，比如 <code>branch -d test</code>，如果我们想恢复此分支，可以通过 reflog 来进行恢复，不过前提是，这个 test 分支的信息没有被 <code>git gc</code> 清除。</p><p>一般情况下，除非手动执行了 <code>git gc</code> 命令，否则 <code>gc</code> 对那些无用的 <code>object</code> 会保留很长时间后才清除的，<code>reflog</code> 是 Git 提供的一个内部工具，用于记录对 Git 仓库进行的各种操作，可以使用 <code>git reflog show</code> 所有的管理类操作日志。</p><h2 id="_18-1-场景复现" tabindex="-1">18.1 场景复现 <a class="header-anchor" href="#_18-1-场景复现" aria-label="Permalink to &quot;18.1 场景复现&quot;">​</a></h2><p>我们现在模拟一下现场，首先我会新建一个分支，然后修改一些内容，然后提交到版本控制器中，最后再将此分支删除，模拟出分支被删除的情况。</p><p>首先，我们查看当前版本库控制器中有哪些分支，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令后，返回结果如下图所示： <img src="'+n+'" alt="图片描述"> 在图中可以看到当前分支处于 master 中，并且本地只存在一个 master 分支。</p><p>接着我们新建一个新的分支，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout -b retest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，提示信息如下： <img src="'+i+'" alt="图片描述"> 在终端的截图中可以看出新建分支已经成功，并且已经自动切换到了 <code>retest</code> 分支上</p><p>接着我们随意修改一下代码，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;测试恢复&#39; &gt; 测试恢复.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行修改代码的命令后，我们再检查一下当前的修改状态，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令后，返回的提示信息如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中可以看到新增了一个文件，我们将此文件提交到版本控制器中，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add .  &amp;&amp; git commit . -m &#39;添加测试文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完后返回如下图所示： <img src="'+c+'" alt="图片描述"> 在图中可以看到一个文件被修改，新增了一行代码。接着我们开始将此分支删除，首先我们切换到另外一个分支上去，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令之后，返回的信息如下图所示： <img src="'+l+'" alt="图片描述"> 在图中可以看到已经成功切换到了 master 分支，接着我再把 <code>retest</code> 分支删除，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -D retest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的信息如下图所示： <img src="'+p+'" alt="图片描述"> 在图中可以看到 Git 已经提示删除分支成功，接下来我们查看分支列表，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回信息如下图所示： <img src="'+d+'" alt="图片描述"> 在图中可以看出当前只剩下 <code>master</code> 分支，之前的 <code>retest</code> 已经不见了；至此我们实验环境已经完成，接下来将开始进行恢复分支的实践。</p><h2 id="_18-2-恢复实践" tabindex="-1">18.2 恢复实践 <a class="header-anchor" href="#_18-2-恢复实践" aria-label="Permalink to &quot;18.2 恢复实践&quot;">​</a></h2><p>恢复的过程，相比实验环境搭建来说很简单，我们只需要两步操作即可，首先通过日志找到 <code>commitid</code>，然后通过新建分支的方式，加入<code>commitid</code>即可。</p><h3 id="_18-2-1-找出commitid" tabindex="-1">18.2.1 找出commitId <a class="header-anchor" href="#_18-2-1-找出commitid" aria-label="Permalink to &quot;18.2.1 找出commitId&quot;">​</a></h3><p>在之前的章节当中，我们学习了 <code>git log</code> 命令，这条命令可以显示所有提交过的版本信息，但我们对分支的一些管理操作并不会显示出来；这些管理的操作日志并不是没有记录，而是需要使用 <code>git reflog</code> 命令才能显示，显示分支管理命令参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reflog show</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后返回信息如下图所示： <img src="'+r+'" alt="图片描述"> 在图中注意看红色框选区域，下面一条是我切换到 <code>retest</code> 分支时候记录下来的，另外一条是执行了提交操作，我们把 <code>commitid</code> 值 <code>b52b955</code> 复制下来。</p><p>接着使用 <code>git branch 分支名称 commit_id</code> 方式建立一个新的分支，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout -b  retest_v3  b52b955</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回信息如下图所示： <img src="'+m+'" alt="图片描述"> 在图中可以看出一个成功新建了一个 <code>retest_v3</code> 分支，并自动切换当前所在的分支为 <code>retest_v3</code>，接下来我们查看<code>commitid</code> 是否也包含在里面，查看提交记录参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行之后，返回的提交版本记录如下图所示： <img src="'+g+'" alt="图片描述"> 在图中可以看到，我们之前搭建实验环境时候提交的记录显示出来了，至此我们已经成功把丢失的分支，通过重建分支的方式恢复到了 <code>retest_v3</code> 上了。</p><h2 id="_18-3-常见问题" tabindex="-1">18.3 常见问题 <a class="header-anchor" href="#_18-3-常见问题" aria-label="Permalink to &quot;18.3 常见问题&quot;">​</a></h2><p>在实验 Git 中，还有很多种方式造成可能丢失记录或分支的情况，恢复起来其实都大同小异，这里针对几个常见的问题进行说明一下。</p><h4 id="_18-3-1-回滚-reset-操作" tabindex="-1">18.3.1 回滚 reset 操作 <a class="header-anchor" href="#_18-3-1-回滚-reset-操作" aria-label="Permalink to &quot;18.3.1 回滚 reset 操作&quot;">​</a></h4><p>如果你不小心使用 <code>git reset</code> 回滚了提交记录，想找回之前的提交记录也是可以的；可以 <code>git reflog</code> 查看操作历史，找到执行 <code>git reset</code> 命令之前 <code>commitid</code>，然后 <code>git reset --hard</code> 到那个 <code>commitid</code> 即可。</p><h4 id="_18-3-2-从历史版本中找回删除的文件" tabindex="-1">18.3.2 从历史版本中找回删除的文件 <a class="header-anchor" href="#_18-3-2-从历史版本中找回删除的文件" aria-label="Permalink to &quot;18.3.2 从历史版本中找回删除的文件&quot;">​</a></h4><p>有时候，我们在某个版本中删除了文件，后来又突然发现需要这个文件，也是可以恢复的；恢复之前首先确定要恢复的文件在哪一个版本（commit）中，假设那个版本号是： 7a4312sd，文件路径为 abc.php 那么参考命如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout 7a4312sd abc.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_18-4-小结" tabindex="-1">18.4 小结 <a class="header-anchor" href="#_18-4-小结" aria-label="Permalink to &quot;18.4 小结&quot;">​</a></h2><p>Git 是一个比较成熟的版本控制器系统，通常误操作导致的代码丢失，只要还没有触发 <code>git gc</code> 操作，那么基本都是可以恢复的，恢复的方式主要是通过 <code>git reflog</code> 找出对应的 commitid，然后按照去恢复：</p><ol><li>使用 <code>git reflog</code> 可以查看 Git 的操作的日志，<code>git log</code> 只能查看版本日志；</li><li>找回分支命令参考 <code>git branch 分支名称 commitid</code>。</li></ol>',45),u=[h];function _(v,C,y,f,A,k){return a(),s("div",null,u)}const w=e(b,[["render",_]]);export{D as __pageData,w as default};

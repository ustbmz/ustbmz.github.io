import{_ as s,o as t,c as a,U as e}from"./chunks/framework.76b79cb5.js";const n="/assets/20211215154644.0b044683.png",l="/assets/20211215164209.13682c5c.png",o="/assets/20211216104505.ed669981.png",r="/assets/20220406223123.0c0b145b.png",p="/assets/20220213212313.7148c19c.png",d="/assets/20211216104405.e2ae09e8.jpg",c="/assets/202210151248555.a62d6bcf.png",i="/assets/20211216105521.a4874d69.jpg",v=JSON.parse('{"title":"WebAPI-BOM","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/20.WebAPI-BOM.md","filePath":"frontend/javascript/20.WebAPI-BOM.md"}'),h={name:"frontend/javascript/20.WebAPI-BOM.md"},y=e('<h1 id="webapi-bom" tabindex="-1">WebAPI-BOM <a class="header-anchor" href="#webapi-bom" aria-label="Permalink to &quot;WebAPI-BOM&quot;">​</a></h1><h1 id="webapi" tabindex="-1">WebAPI <a class="header-anchor" href="#webapi" aria-label="Permalink to &quot;WebAPI&quot;">​</a></h1><p>和标准库不同，WebAPI 是<strong>浏览器</strong>提供的一套 API，用于操作浏览器窗口和界面</p><p>WebAPI 中包含两个部分：</p><ul><li>BOM：Browser Object Model，浏览器模型，提供和浏览器相关的操作</li><li>DOM：Document Object Model，文档模型，提供和页面相关的操作</li></ul><img src="'+n+'" alt="image-20211215154639275" style="zoom:50%;"><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h2><p>BOM 提供了一系列的对象和函数，提供和浏览器本身相关的操作</p><h3 id="window" tabindex="-1">window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;window&quot;">​</a></h3><p>全局对象</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open" target="_blank" rel="noreferrer"><code>open()</code></a></td><td>打开一个新的浏览器窗口</td><td>返回新窗口的 window 对象</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/close" target="_blank" rel="noreferrer"><code>close()</code></a></td><td>关闭浏览器窗口</td><td>只能关闭使用 open 打开的浏览器窗口</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noreferrer">==setTimeout()==</a></td><td>设置一个计时器<br>在一段时间后自动执行某个函数</td><td>参数 1：函数，无参，this 指向 window<br>参数 2：时间，毫秒<br>返回：计时器的 ID</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/clearTimeout" target="_blank" rel="noreferrer">==clearTimeout()==</a></td><td>清除指定 ID 的计时器</td><td>传入计时器的 ID</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setInterval" target="_blank" rel="noreferrer">==setInterval()==</a></td><td>设置一个计时器<br>每隔一段时间自动执行某个函数</td><td>参数 1：函数，无参，this 指向 window<br>参数 2：时间，毫秒<br>返回：计时器的 ID</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/clearInterval" target="_blank" rel="noreferrer">==clearInterval()==</a></td><td>清除指定 ID 的计时器</td><td>传入计时器的 ID</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/alert" target="_blank" rel="noreferrer"><code>alert()</code></a></td><td>弹出提示框</td><td>不同的操作系统外观有差异</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/confirm" target="_blank" rel="noreferrer"><code>confirm()</code></a></td><td>弹出确认框</td><td>不同的操作系统外观有差异</td></tr></tbody></table><h3 id="window-location" tabindex="-1">window.location <a class="header-anchor" href="#window-location" aria-label="Permalink to &quot;window.location&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Location</a></p><p>提供地址栏的相关操作</p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/href" target="_blank" rel="noreferrer">==Location.href==</a></td><td>获取或设置页面当前地址</td><td>设置地址回导致页面跳转</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol" target="_blank" rel="noreferrer"><code>Location.protocol</code></a></td><td>获取或设置地址中的协议部分</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/host" target="_blank" rel="noreferrer"><code>Location.host</code></a></td><td>获取或设置地址中的主机名和端口号</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hostname" target="_blank" rel="noreferrer"><code>Location.hostname</code></a></td><td>获取或设置地址中的主机名</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/port" target="_blank" rel="noreferrer"><code>Location.port</code></a></td><td>获取或设置地址中的端口号</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname" target="_blank" rel="noreferrer"><code>Location.pathname</code></a></td><td>获取或设置地址中的路径部分</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/search" target="_blank" rel="noreferrer"><code>Location.search</code></a></td><td>获取或设置地址中的参数部分</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hash" target="_blank" rel="noreferrer"><code>Location.hash</code></a></td><td>获取或设置地址中的 hash 部分</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/reload" target="_blank" rel="noreferrer"><code>Location.reload()</code></a></td><td>刷新页面</td><td></td></tr></tbody></table><h3 id="window-history" tabindex="-1">window.history <a class="header-anchor" href="#window-history" aria-label="Permalink to &quot;window.history&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/History</a></p><p>提供当前窗口历史记录的操作</p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/back" target="_blank" rel="noreferrer"><code>History.back()</code></a></td><td>后退</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/forward" target="_blank" rel="noreferrer"><code>History.forward()</code></a></td><td>前进</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/go" target="_blank" rel="noreferrer"><code>History.go()</code></a></td><td>根据相对当前页面的偏移量，<br>进入指定的记录页</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/pushState" target="_blank" rel="noreferrer"><code>History.pushState()</code></a></td><td>在历史记录中添加一条记录</td><td>页面不刷新</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/replaceState" target="_blank" rel="noreferrer"><code>History.replaceState()</code></a></td><td>替换当前记录</td><td>页面不刷新</td></tr></tbody></table><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><p>DOM 是一个对象，它对应到 HTML 中的节点</p><img src="'+l+`" alt="image-20211215164209559" style="zoom:50%;"><h3 id="获取-dom" tabindex="-1">获取 dom <a class="header-anchor" href="#获取-dom" aria-label="Permalink to &quot;获取 dom&quot;">​</a></h3><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据元素 id 获取 dom</td><td>得到单个 dom</td></tr><tr><td>document.getElementsByTagName()<br>dom.getElementsByTagName()</td><td>根据元素名称获取 dom</td><td>得到 dom 的伪数组</td></tr><tr><td>document.getElementsByClassName()<br>dom.getElementsByClassName()</td><td>根据元素类样式获取 dom</td><td>得到 dom 的伪数组</td></tr><tr><td>==document.querySelector()==<br>==dom.querySelector()==</td><td>根据 CSS 选择器获取 dom</td><td>得到第一个匹配的 dom</td></tr><tr><td>==document.querySelectorAll()==<br>==dom.querySelectorAll()==</td><td>根据 CSS 选择器获取 dom</td><td>得到所有匹配的 dom<br>伪数组</td></tr><tr><td>==document.documentElement==</td><td>获取 html 元素</td><td></td></tr><tr><td>document.body</td><td>获取 body</td><td></td></tr><tr><td>document.head</td><td>获取 head</td><td></td></tr><tr><td>==dom.children==</td><td>获取 dom 的子元素</td><td>得到 dom 的伪数组</td></tr><tr><td>dom.childNodes</td><td>获取 dom 的子节点</td><td>得到 dom 节点的伪数组<br>关于节点对象点<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noreferrer">这里</a></td></tr><tr><td>dom.previousElementSibling</td><td>得到 dom 前一个兄弟元素</td><td></td></tr><tr><td>dom.nextElementSibling</td><td>得到 dom 后一个兄弟元素</td><td></td></tr><tr><td>==dom.parentElement==</td><td>得到 dom 的父元素</td><td></td></tr></tbody></table><h3 id="创建-dom" tabindex="-1">创建 dom <a class="header-anchor" href="#创建-dom" aria-label="Permalink to &quot;创建 dom&quot;">​</a></h3><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>==document.createElement()==</td><td>创建一个 dom 并返回</td><td>传入元素名称</td></tr></tbody></table><h3 id="更改-dom-结构" tabindex="-1">更改 dom 结构 <a class="header-anchor" href="#更改-dom-结构" aria-label="Permalink to &quot;更改 dom 结构&quot;">​</a></h3><p>这里是指更改文档树（DOM 树）</p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>==dom.remove()==</td><td>从文档树中删除 dom</td><td>不是删除对象</td></tr><tr><td>dom.removeChild()</td><td>删除 dom 的某个子节点</td><td>传入 dom 对象</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="noreferrer"><code>dom.insertBefore()</code></a></td><td>在 dom 的子节点中，添加一个新节点到另一个节点之前</td><td></td></tr><tr><td>==dom.appendChild()==</td><td>添加一个新节点到 dom 的子节点末尾</td><td>传入 dom 对象</td></tr></tbody></table><h3 id="dom-属性" tabindex="-1">dom 属性 <a class="header-anchor" href="#dom-属性" aria-label="Permalink to &quot;dom 属性&quot;">​</a></h3><p>本节的「属性」，是指 HTML 元素的「属性」</p><p>属性有两种：</p><ul><li>标准属性：HTML 元素本身拥有的属性，例如： <ul><li>a 元素的 href、title</li><li>input 的 value</li><li>img 的 src</li><li>......</li></ul></li><li>自定义属性：HTML 元素标准中未定义的属性</li></ul><p><strong>所有标准属性均可通过 <code>dom.属性名</code> 得到，其中：</strong></p><ul><li><p>布尔属性会被自动转换为 boolean</p></li><li><p>路径类的属性会被转换为绝对路径</p></li><li><p>标准属性始终都是存在的，不管你是否有在元素中属性该属性</p></li><li><p>class 由于和关键字重名，因此需要使用 className</p></li></ul><p><strong>所有的自定义属性均可通过下面的方式操作：</strong></p><ul><li><code>dom.setAttribute(name, value)</code>，设置属性键值对</li><li><code>dom.getAttribute(name)</code>，获取属性值</li></ul><p>自定义属性和元素源码书写是对应的，可以尝试获取 a 元素的 href 属性对比标准属性，看看有什么不同。</p><h3 id="dom-内容" tabindex="-1">dom 内容 <a class="header-anchor" href="#dom-内容" aria-label="Permalink to &quot;dom 内容&quot;">​</a></h3><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>==dom.innerText==</td><td>获取或设置元素文本内容</td><td>设置时会自动进行 HTML 实体编码</td></tr><tr><td>==dom.innerHTML==</td><td>获取或设置元素的 HTML 内容</td><td></td></tr></tbody></table><h3 id="dom-样式" tabindex="-1">dom 样式 <a class="header-anchor" href="#dom-样式" aria-label="Permalink to &quot;dom 样式&quot;">​</a></h3><p>在 JS 中，有两种样式：</p><ul><li>内联样式：元素的 style 属性中书写的样式</li><li>计算样式（最终样式）：元素最终计算出来的样式</li></ul><p><strong>JS 可以获取内联样式和计算样式，但只能设置内联样式</strong></p><p>下面罗列了样式的常见操作：</p><ul><li><code>dom.style</code>：获取元素的内联样式，得到样式对象 <ul><li>对象中的所有样式属性均可以被赋值，赋值后即可应用样式到元素的 style 中</li></ul></li><li><code>getComputedStyle(dom)</code>：获取元素的计算样式，得到一个样式对象 <ul><li>该样式对象中的属性是只读的，无法被重新赋值</li></ul></li></ul><p>关于<strong>样式对象</strong>，注意：</p><ul><li>当给样式赋值为空字符串时，相当于删除内联样式</li><li>当给样式的赋值不合法时，赋值语句无效，不会报错</li><li>CSS 的短横线命名法，在属性名中表现为驼峰命名法</li></ul><h3 id="监听-dom-事件" tabindex="-1">监听 dom 事件 <a class="header-anchor" href="#监听-dom-事件" aria-label="Permalink to &quot;监听 dom 事件&quot;">​</a></h3><p>监听事件可以描述为一句话：</p><p><strong>某个 DOM</strong>发生了<strong>某件事</strong>之后，我需要做<strong>某些处理</strong></p><ul><li>某个 DOM：监听谁？</li><li>某件事（事件类型）：它发生了什么？</li><li>某些处理（处理函数）：我要做什么？</li></ul><p>下面是一段事件监听代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 为dom注册点击事件，当被点击时，自动运行事件处理函数</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dom 被点击了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/Events</a></p><h5 id="表单类事件" tabindex="-1">表单类事件 <a class="header-anchor" href="#表单类事件" aria-label="Permalink to &quot;表单类事件&quot;">​</a></h5><table><thead><tr><th>事件名称</th><th>触发时机</th><th>备注</th></tr></thead><tbody><tr><td>==submit==</td><td>表单被提交时触发</td><td>注册到 form 元素上</td></tr><tr><td>==input==</td><td>文本框改变后立即出发</td><td>注册到 input、textarea 上</td></tr><tr><td>==change==</td><td>文本框改变后、失去焦点时触发<br>下拉列表、多选框、单选框改变后立即触发</td><td>注册到 input、select、textarea 上</td></tr><tr><td>reset</td><td>表单被重置时触发</td><td>注册到 form 元素上</td></tr><tr><td>focus</td><td>元素聚焦时触发</td><td></td></tr><tr><td>blur</td><td>元素失去焦点时触发</td><td></td></tr></tbody></table><h5 id="鼠标类事件" tabindex="-1">鼠标类事件 <a class="header-anchor" href="#鼠标类事件" aria-label="Permalink to &quot;鼠标类事件&quot;">​</a></h5><table><thead><tr><th>事件名称</th><th>触发时机</th><th>备注</th></tr></thead><tbody><tr><td>==click==</td><td>鼠标按下抬起后触发</td><td></td></tr><tr><td>contextmenu</td><td>右键菜单显示前触发</td><td></td></tr><tr><td>==mousedown==</td><td>鼠标按下时触发</td><td></td></tr><tr><td>==mouseup==</td><td>鼠标抬起时触发</td><td></td></tr><tr><td>==mousemove==</td><td>鼠标在元素上移动时触发</td><td></td></tr><tr><td>==mouseenter==</td><td>鼠标进入元素时触发（不冒泡）</td><td></td></tr><tr><td>==mouseleave==</td><td>鼠标离开元素时触发（不冒泡）</td><td></td></tr><tr><td>mouseover</td><td>鼠标进入元素时触发（冒泡）</td><td></td></tr><tr><td>mouseout</td><td>鼠标离开元素时触发（冒泡）</td><td></td></tr><tr><td>wheel</td><td>鼠标滚轮滚动时触发</td><td></td></tr></tbody></table><h5 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h5><table><thead><tr><th>事件名称</th><th>触发时机</th><th>备注</th></tr></thead><tbody><tr><td>keydown</td><td>某个键被按下时触发</td><td></td></tr><tr><td>keyup</td><td>某个键被抬起时触发</td><td></td></tr></tbody></table><h4 id="注册事件" tabindex="-1">注册事件 <a class="header-anchor" href="#注册事件" aria-label="Permalink to &quot;注册事件&quot;">​</a></h4><p>JS 提供了三种方式注册事件</p><p>方式 1：将事件注册写到元素上，这种方式基本被弃用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">js代码</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>==方式 2：使用 dom 属性注册事件==</p><p>属性名为<code>on+事件类型</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 监听事件</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理函数</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 移除监听事件</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这种方式的特点是：</p><ul><li>优点：易于监听、覆盖、移除</li><li>缺点：只能注册一个处理函数</li><li>缺点：某些事件不支持用这种方式注册</li></ul><p>==方式 3：使用 addEventListener 方法注册事件==</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理函数1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理函数2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这是最完美的事件注册方式，如果要移除用这种方式注册的事件，需要改写代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handler1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理函数1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handler2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理函数2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler1)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 移除监听函数1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="事件处理函数" tabindex="-1">事件处理函数 <a class="header-anchor" href="#事件处理函数" aria-label="Permalink to &quot;事件处理函数&quot;">​</a></h4><p>当事件发生时，会自动调用事件处理函数，并向函数传递一个参数，该参数称之为事件对象，里面包含了事件发生的相关信息，比如鼠标位置、键盘按键等等</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientX</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//打印鼠标的横坐标</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>常见的事件对象有：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent" target="_blank" rel="noreferrer">鼠标事件对象</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/KeyboardEvent" target="_blank" rel="noreferrer">键盘事件对象</a></p><p>另外，在事件处理函数中，<code>this</code>始终指向注册事件的 dom</p><h3 id="dom-进阶" tabindex="-1">dom 进阶 <a class="header-anchor" href="#dom-进阶" aria-label="Permalink to &quot;dom 进阶&quot;">​</a></h3><h4 id="事件默认行为" tabindex="-1">事件默认行为 <a class="header-anchor" href="#事件默认行为" aria-label="Permalink to &quot;事件默认行为&quot;">​</a></h4><p>某些元素的某些事件，浏览器会有自己的默认行为</p><p>比如：</p><ul><li>a 元素的 click 事件，浏览器会跳转页面</li><li>form 元素的 submit 事件，浏览器会提交表单，最终导致页面刷新</li><li>文本框的 keydown 事件，浏览器会将按键文本显示到文本框中</li><li>......</li></ul><p>如果我们要阻止浏览器的默认行为，就需要在对应时间中加入以下代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// e为事件对象</span></span>
<span class="line"><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="dom-尺寸和位置" tabindex="-1">dom 尺寸和位置 <a class="header-anchor" href="#dom-尺寸和位置" aria-label="Permalink to &quot;dom 尺寸和位置&quot;">​</a></h4><img src="`+o+'" alt="尺寸1" style="zoom:50%;"><p><img src="'+r+'" alt="尺寸2"></p><p><img src="'+p+'" alt="尺寸3"></p><img src="'+d+'" alt="尺寸4" style="zoom:50%;"><blockquote><p>调用<code>dom.scrollTo(x, y)</code>可以设置元素的滚动位置，x 和 y 分别表示 scrollLeft 和 scrollTop</p><p>该方法通用元素回到元素顶部<code>dom.scrollTo(0, 0)</code></p><p>如果要监听元素的滚动，可以监听事件类型：==scroll==</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noreferrer">Element.getBoundingClientRect()</a></p><p><img src="'+c+'" alt="element-box-diagram"></p><blockquote><p>上图中的 top、left、right、bottom 均相对于视口</p></blockquote><h4 id="事件传播机制" tabindex="-1">事件传播机制 <a class="header-anchor" href="#事件传播机制" aria-label="Permalink to &quot;事件传播机制&quot;">​</a></h4><img src="'+i+`" alt="事件流" style="zoom:50%;"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在冒泡阶段触发</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在捕获阶段触发事件</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在冒泡阶段触发事件（默认）</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 事件处理函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 获取事件源（目标阶段的dom）</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopPropagation</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 阻止事件继续冒泡</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,100),m=[y];function b(D,F,A,u,C,g){return t(),a("div",null,m)}const k=s(h,[["render",b]]);export{v as __pageData,k as default};

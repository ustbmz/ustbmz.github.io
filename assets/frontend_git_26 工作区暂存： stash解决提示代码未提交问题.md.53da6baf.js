import{_ as s,o as a,c as e,U as t}from"./chunks/framework.76b79cb5.js";const n="/assets/5e9d4a110001ebf110000156.939a1118.png",l="/assets/5e9d4ab20001912c15320224.c44fd4c5.png",i="/assets/5e9d4ab70001812212940360.70253832.png",p="/assets/5e9d4abd0001b80c12940258.c3e9d1bb.png",c="/assets/5e9d4ac30001509712940156.4588ad6a.png",o="/assets/5e9d4ac90001931b12940190.9240c61a.png",d="/assets/5e9d4acf0001856112940156.3b695bd4.png",r="/assets/5e9d4ad5000181f012940292.c0c88c65.png",m="/assets/5e9d4ada0001829912940156.781ff8ef.png",u="/assets/5e9d4adf0001a9bc12940156.731da8ce.png",g="/assets/5e9d4ae50001caf912940258.0554e041.png",h="/assets/5e9d4aea0001b65b12940360.8f155341.png",G=JSON.parse('{"title":"26 工作区暂存","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/26 工作区暂存： stash解决提示代码未提交问题.md","filePath":"frontend/git/26 工作区暂存： stash解决提示代码未提交问题.md"}'),b={name:"frontend/git/26 工作区暂存： stash解决提示代码未提交问题.md"},_=t('<h1 id="_26-工作区暂存" tabindex="-1">26 工作区暂存 <a class="header-anchor" href="#_26-工作区暂存" aria-label="Permalink to &quot;26 工作区暂存&quot;">​</a></h1><p>在团队合作开发中，我们尽量会将一个功能完整开发后再提交版本，这样当其他人拉取代码时候，就不会因为功能不完整而产生报错问题；但有时候线上出现紧急 bug，需要把已经提交的版本发布到线上，这个时候还没有开发完整的改动就比较尴尬；如果丢弃未开发完整的代码有点可惜，但提交又可能会导致其他人拉取到未开发完整的代码，从而导致出现问题。</p><p>不提交不丢弃也不行，因为如果需要去切换分支去合并代码，Git 会提示有未提交的改动，而不允许切换分支；遇到这种问题时候，可以使用这一节中的<code>git stash</code>命令，将工作区改动临时存储起来，然后就可以切换分支了，等处理完一切事物后，再回到开发分支将暂存区域恢复，继续进行开发。</p><h2 id="_26-1-场景复现" tabindex="-1">26.1 场景复现 <a class="header-anchor" href="#_26-1-场景复现" aria-label="Permalink to &quot;26.1 场景复现&quot;">​</a></h2><p>工作区暂存使用的场景有很多，下面我们模拟一个现象来举例，平时遇到 Git 提示工作区改动未提交不能切换分支，就可以使用工作区暂存方式解决，下面带着大家来熟悉<code>git stash</code>命令的使用。</p><p>首先我们切换到<code>develop</code>这个开发分支中，随意修改一些代码然后提交一个版本；然后再次修改一些代码，但不提交版本，进行切换分支，我们看看会提示什么，切换到 <code>develop</code>分支命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，终端展示的信息如下图所示： <img src="'+n+'" alt="图片描述"> 在上图中可以看到已经成功切换到了 develop 分支，现在我随意修改一些代码，然后提交一个新版本，代表这是我们开发完成功能后提交的版本，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;222221112&#39; &gt; aa.txt &amp;&amp; git add . &amp;&amp; git commit . -m &#39;暂存功能测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+l+'" alt="图片描述"> 在上图中可以看到文件<code>aa.txt</code>已经成功的添加到新版本控制器中去，接着我们继续开发新功能，这里我们随意修改代码，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;333333333&#39; &gt; aa.txt  &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+i+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件的内容已经发生了变更。就在这个时候有人反馈线上代码发现了一个重大的 bug，需要立即切换分支去修复 bug，于是我们准备切换分支，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的提示信息如下图所示： <img src="'+p+'" alt="图片描述"> 在上图中可以看到无法切换分支，并且提示需要将工作区提交存储起来。</p><h2 id="_26-2-工作区暂存" tabindex="-1">26.2 工作区暂存 <a class="header-anchor" href="#_26-2-工作区暂存" aria-label="Permalink to &quot;26.2 工作区暂存&quot;">​</a></h2><p>但刚才的开发只开发到一半，并不合适把它单独存到一个版本，这个时候我们就可以使用<code>git stash</code>命令来解决这个尴尬，执行如下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+c+'" alt="图片描述"> 在上图中看到的这个提示，代表我们将工作区改动暂存成功， 我们可以通过<code>git status</code>命令查看当前状态，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中可以看到当前工作区没有任何改动的提示，这是因为我们已经成功把修改的代码存储到暂存区了，接着再次尝试切换到 test 分支，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+d+'" alt="图片描述"> 在上图中可以看到切换到<code>test</code>分支已经成功，接下来我们将在<code>develop</code>分支中提交的版本合并过来，合并分支的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+r+'" alt="图片描述"> 在上图中可以看到合并代码已经成功，我们通过<code>cat</code>命令查看<code>aa.txt</code>文件是否已经过来，用来验证合并是否成功，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cat aa.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，展示<code>aa.txt</code>文件内容如下图所示： <img src="'+m+'" alt="图片描述"> 在上图中可以看到提交的版本代码已经成功复制过来，到这里我们就解决了未提交版本不能切换分支的尴尬。</p><h2 id="_26-3-暂存区查看" tabindex="-1">26.3 暂存区查看 <a class="header-anchor" href="#_26-3-暂存区查看" aria-label="Permalink to &quot;26.3 暂存区查看&quot;">​</a></h2><p>既然已经把可以合并的版本合并完成，那么接下来就可以回到 <code>develop</code> 分支继续进行开发，切回<code>develop</code>分支执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+u+'" alt="图片描述"> 在上图中可以看到已经成功切换回 <code>develop</code> 分支，到现在我们就解决了不能切换分支的问题，接着我们需要将刚暂存的改动恢复到工作区，这样就可以继续我们的开发任务，恢复暂存改动的命令也非常简单，我们使用<code>git stash apply</code>命令即可，不过在执行恢复暂存区之前，我们可以先看暂存区列表，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+g+'" alt="图片描述"> 在上图中可以看到有一个暂存的记录，既然是列表就说明暂存区也是可以存放多个的，当我们需要恢复时候，可以使用如下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash apply stash@{0}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在上面命令中，<code>git stash apply</code>为固定格式，<code>stash@{0}</code>为编号，如果想恢复最近的一个改动也可以不填写编号，直接执行命令的前半部分就可以了，如下命令所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash apply</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回如下图所示： <img src="'+h+'" alt="图片描述"> 在上图中可以看到提示<code>aa.txt</code>文件有改动未被提交，说明我们暂存区已经成功恢复了。</p><h2 id="_26-4-小结" tabindex="-1">26.4 小结 <a class="header-anchor" href="#_26-4-小结" aria-label="Permalink to &quot;26.4 小结&quot;">​</a></h2><p>工作区暂存适合于我们需要临时存储改动，暂存区和分支没有关联关系，是可以跨分支的，命令都是以<code>git stash</code>命令开头，这里我们主要记住这三个命令：</p><ol><li><code>git stash</code> 暂存当前工作区的改动</li><li><code>git stash apply {暂存区编号}</code> 不填编号恢复上一次暂存的改动，填了恢复指定暂存记录</li><li><code>git stash list</code> 查看暂存区列表</li></ol>',39),v=[_];function C(y,A,f,k,x,D){return a(),e("div",null,v)}const q=s(b,[["render",C]]);export{G as __pageData,q as default};

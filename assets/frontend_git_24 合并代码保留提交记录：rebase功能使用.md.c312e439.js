import{_ as e,o as a,c as s,U as t}from"./chunks/framework.76b79cb5.js";const o="/assets/5e9d49f90001839914760156.1c6e9f39.png",n="/assets/5e9d4a010001d05114760190.6c5a796e.png",c="/assets/5e9d4a070001022a14760530.19b93d8a.png",i="/assets/5e9d4a110001ebf110000156.939a1118.png",r="/assets/5e9d4a17000146ce14760428.7971ff79.png",l="/assets/5e9d49f90001839914760156.1c6e9f39.png",d="/assets/5e9d4a3900013bf314760258.ffd698f0.png",p="/assets/5e9d4a3e00016c9c17841142.fc57c4ed.png",m="/assets/5e9d4a440001891214480156.6e4820db.png",g="/assets/5e9d4a490001ae3e14480462.35db776a.png",b="/assets/5e9d4a4e0001cac614480190.1174bfca.png",u="/assets/5e9d4a540001350314480938.040a3e6a.png",P=JSON.parse('{"title":"24 合并代码保留提交记录：rebase功能使用","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/24 合并代码保留提交记录：rebase功能使用.md","filePath":"frontend/git/24 合并代码保留提交记录：rebase功能使用.md"}'),h={name:"frontend/git/24 合并代码保留提交记录：rebase功能使用.md"},_=t('<h1 id="_24-合并代码保留提交记录-rebase功能使用" tabindex="-1">24 合并代码保留提交记录：rebase功能使用 <a class="header-anchor" href="#_24-合并代码保留提交记录-rebase功能使用" aria-label="Permalink to &quot;24 合并代码保留提交记录：rebase功能使用&quot;">​</a></h1><p>在第 20 节中，我们了学习使用<code>git merge</code>进行分支合并，在执行合并时候会将目标分支的代码与当前分支的代码进行合并，合并完成之后会产生一个新的版本，在这一节当中我们学习一个与<code>git merge</code>类似的<code>git rebase</code>命令，<code>git rebase</code>会将另外一个分支提交的所有新版本记录复制到当前分支中，但和<code>merge</code>稍有差异；</p><p>大多数情况下使用<code>git merge</code>命令已经满足合并需求，但如果你不想在分支中看到合并完成后产生的 <code>merge branch</code>版本记录时可以使用<code>git rebase</code>命令，这样会让当前分支看起来更加整洁，但区别也不仅仅如此，在这一节当中我使用<code>git merge</code>和<code>git rebase</code>作对比来进行演示。</p><h2 id="_24-1-merge-合并" tabindex="-1">24.1 merge 合并 <a class="header-anchor" href="#_24-1-merge-合并" aria-label="Permalink to &quot;24.1 merge 合并&quot;">​</a></h2><p><code>git merge</code>命令和<code>git rebase</code>应用场景很类似，在这一节当中我们先使用<code>git merge</code>进行合并操作一次，然后大家注意观察版本记录列表中的版本记录顺序。</p><h3 id="_24-1-1-在-test-分支修改代码" tabindex="-1">24.1.1 在 test 分支修改代码 <a class="header-anchor" href="#_24-1-1-在-test-分支修改代码" aria-label="Permalink to &quot;24.1.1 在 test 分支修改代码&quot;">​</a></h3><p>现在首先我切换到<code>test</code>分支中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回信息如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中，可以看到已经切换到<code>test</code>分支当中，现在我随意在<code>test</code>分支当中修改代码，然后提交一个版本，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;44444444&#39; &gt;&gt; aa.txt &amp;&amp; git commit . -m &#39;rebase测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会修改<code>aa.txt</code>文件的代码，并执行了<code>git commit</code>提交工作区的修改到新版本中，返回信息如下所示： <img src="'+n+'" alt="图片描述"> 在上图中可以看到提交新版本成功。</p><h3 id="_24-1-2-将-test-分支推送到远程仓库" tabindex="-1">24.1.2 将 test 分支推送到远程仓库 <a class="header-anchor" href="#_24-1-2-将-test-分支推送到远程仓库" aria-label="Permalink to &quot;24.1.2 将 test 分支推送到远程仓库&quot;">​</a></h3><blockquote><p>一会使用<code>git rebase</code>命令演示时候还需要当前的场景，这里我将刚才提交的版本推送到远程去，这样需要恢复当前版本的时候就可以用远程覆盖本地版本，免得重复构建实验环境。</p></blockquote><p>执行推送到远程仓库的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push --set-upstream origin test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，远程仓库返回的信息如下图所示： <img src="'+c+'" alt="图片描述"> 在上图中可以看到推送到远程仓库已经成功，接下来在<code>develop</code>也进行一些改动。</p><h3 id="_24-1-3-在-develop-分支修改代码" tabindex="-1">24.1.3 在 develop 分支修改代码 <a class="header-anchor" href="#_24-1-3-在-develop-分支修改代码" aria-label="Permalink to &quot;24.1.3 在 develop 分支修改代码&quot;">​</a></h3><p>首先切换到<code>develop</code>分支中去，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回信息如下图所示： <img src="'+i+`" alt="图片描述"> 在上图中可以看到已经切换到<code>develop</code>分支，接着我随意的修改代码提交几个版本，执行命令如下所示： develop仓库提交代码多次代码。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;1111111111&#39; &gt;&gt; aa.txt &amp;&amp; git commit . -m &#39;rebase测试&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">echo &#39;2222222222&#39; &gt;&gt; aa.txt &amp;&amp; git commit . -m &#39;rebase测试2&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">echo &#39;3333333333&#39; &gt;&gt; aa.txt &amp;&amp; git commit . -m &#39;rebase测试3&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="`+r+'" alt="图片描述"> 在上图中可以看到提交了三个版本，</p><h3 id="_24-1-4-使用merge命令合并代码" tabindex="-1">24.1.4 使用merge命令合并代码 <a class="header-anchor" href="#_24-1-4-使用merge命令合并代码" aria-label="Permalink to &quot;24.1.4 使用merge命令合并代码&quot;">​</a></h3><p>接着我们回到<code>test</code>分支中，并使用<code>git merge</code>命令将<code>develop</code>分支的代码合并过来，回到<code>test</code>分支的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+l+'" alt="图片描述"> 在上图中可以看到已经切换回 test 分支当中，接着使用<code>git merge</code>命令合并代码，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+d+'" alt="图片描述"> 在上图中可以看到合并代码成功，显示了一行代码变更，我们现在就可以使用<code>git log</code>命令查看版本日志列表的效果了，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的版本列表信息如下图所示： <img src="'+p+'" alt="图片描述"> 在上图中可以看到刚才分别在两个分支下提交的四个版本，在版本列表中顺序是时间的先后顺序，最开始在<code>test</code>分支提交的版本在最下方，后来切换到<code>develop</code>分支提交的三个版本在上方，最上方的版本为<code>merge branch</code>的版本记录，先记住这是<code>git merge</code>命令合并代码效果。</p><h2 id="_24-2-rebase-效果" tabindex="-1">24.2 rebase 效果 <a class="header-anchor" href="#_24-2-rebase-效果" aria-label="Permalink to &quot;24.2 rebase 效果&quot;">​</a></h2><p>接下来我们来试试<code>git rebase</code>命令的效果，通过版本记录列表对比两者有什么区别，我们现在依然在<code>test</code>分支下。</p><h3 id="_24-2-1-从远端恢复环境" tabindex="-1">24.2.1 从远端恢复环境 <a class="header-anchor" href="#_24-2-1-从远端恢复环境" aria-label="Permalink to &quot;24.2.1 从远端恢复环境&quot;">​</a></h3><p>使用<code>git reset</code>命令将版本撤销到<code>git merge</code>前的状态，直接以远端为准即可，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset origin/test  --hard</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git返回的信息如下图所示： <img src="'+m+'" alt="图片描述"> 在上图中可以看到分支的版本已经回滚成功，我们可以使用<code>git log</code>命令来查看版本列表进行确认，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git  log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的版本列表如下图所示： <img src="'+g+'" alt="图片描述"> 在上图中可以看到当前只有<code>rebase</code>测试这个版本了，其他几个版本已经被撤销。</p><h3 id="_24-2-2-使用-rebase-命令复制版本记录" tabindex="-1">24.2.2 使用 rebase 命令复制版本记录 <a class="header-anchor" href="#_24-2-2-使用-rebase-命令复制版本记录" aria-label="Permalink to &quot;24.2.2 使用 rebase 命令复制版本记录&quot;">​</a></h3><p>接着我们使用<code>git rebase</code>命令将<code>develop</code>分支的代码复制过来，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rebase develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+b+'" alt="图片描述"> 在上图中可以看到<code>git rebase</code>已经成功执行，接着我们使用 <code>git log</code> 查看提交日志，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 的版本列表如下图所示： <img src="'+u+'" alt="图片描述"> 在上图中可以看到四个版本顺序与之前<code>git merge</code>版本记录是不一样的，<code>git rebase</code>命令后版本顺序不是按照时间，而是将<code>develop</code>分支的版本记录放在下方，在当前分支提交的同时也没版本放在最上方，有产生一个<code>Merge branch</code>的版本记录。</p><h2 id="_24-3-小结" tabindex="-1">24.3 小结 <a class="header-anchor" href="#_24-3-小结" aria-label="Permalink to &quot;24.3 小结&quot;">​</a></h2><p>在这节中我们学习了一个<code>git rebase</code>命令，这个命令如果仅仅从代码层面比较，基本是没有区别的，主要的区别在于版本记录的变化，比如说，因为一些情况我需要在<code>test</code>分支修改一些代码，如果我使用了 <code>merge</code> 命令将 <code>develop</code> 的版本合并了进来，后续我想去撤销这次修改的代码，就比较麻烦。</p><p>因为git merge合并后的版本记录的顺序是按照时间顺序来的，这样在<code>test</code>分支提交的版本就可能离当前工作区非常远，这样要撤销起来会影响太多版本记录，而如果是<code>git rebas</code>命令进行的代码合并，它并不是按照时间来排序的，而是一定把 <code>test</code>分支的提交放在离工作区最近， 这样当需要撤销的时候影响面就很小，我们主要记录两个区别：</p><ol><li><code>git merge</code>命令合并代码之后，版本记录会按照时间顺序排序，并自动产生一个<code>Merge branch</code>的版本；</li><li><code>git rebase</code>命令合并代码之后，版本记录会将目标分支的版本放在后面，然后再将当前分支的版本记录放在前边。</li></ol>',48),v=[_];function C(y,f,A,k,q,x){return a(),s("div",null,v)}const w=e(h,[["render",C]]);export{P as __pageData,w as default};

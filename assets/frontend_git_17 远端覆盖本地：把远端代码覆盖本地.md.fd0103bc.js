import{_ as s,o as a,c as e,U as n}from"./chunks/framework.76b79cb5.js";const p="/assets/5e9d4282000152ba10700156.e6b741da.png",t="/assets/5e9d42880001140212240496.a32de347.png",l="/assets/5e9d42900001450f11680190.1c55a77a.png",o="/assets/5e9d429a0001d41912520428.0f6655ad.png",i="/assets/5e9d42aa0001094912940190.fb0f743b.png",c="/assets/5e9d42b1000192c106750316.fc2d88b7.png",r="/assets/5e9d42c00001fec111540360.afdd42c1.png",d="/assets/5e9d42c50001637b11540564.70f5a126.png",m="/assets/5e9d42cb00019d7711540156.dc16da6a.png",g="/assets/5e9d42d10001d0e711540258.ebe98591.png",u="/assets/5e9d42d6000132bb13500564.ee6fc7c0.png",B=JSON.parse('{"title":"17 远端覆盖本地：把远端代码覆盖本地","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/17 远端覆盖本地：把远端代码覆盖本地.md","filePath":"frontend/git/17 远端覆盖本地：把远端代码覆盖本地.md"}'),h={name:"frontend/git/17 远端覆盖本地：把远端代码覆盖本地.md"},b=n('<h1 id="_17-远端覆盖本地-把远端代码覆盖本地" tabindex="-1">17 远端覆盖本地：把远端代码覆盖本地 <a class="header-anchor" href="#_17-远端覆盖本地-把远端代码覆盖本地" aria-label="Permalink to &quot;17 远端覆盖本地：把远端代码覆盖本地&quot;">​</a></h1><p>有时候我们本地仓库代码比较混乱，不能保证代码的质量，但是远程仓库代码是整洁的，需要以远程仓库代码为基准，这个时候有些开发者可能会重新拉取一个仓库，不过实际是还有一种更加简单的方法让你的仓库与远程保持一模一样。</p><h2 id="_17-1-场景复现" tabindex="-1">17.1 场景复现 <a class="header-anchor" href="#_17-1-场景复现" aria-label="Permalink to &quot;17.1 场景复现&quot;">​</a></h2><p>我们先来复现一下场景，新建两个仓库分别是 A 仓库和 B 仓库，A 仓库为正确提交代码，并推送到远程；B 仓库使用 <code>git commit</code> 提交了错误代码，但还未进行推送，希望以远程仓库为基准去回滚代码。</p><h3 id="_17-1-1-模拟正常提交" tabindex="-1">17.1.1 模拟正常提交 <a class="header-anchor" href="#_17-1-1-模拟正常提交" aria-label="Permalink to &quot;17.1.1 模拟正常提交&quot;">​</a></h3><p>首先我把仓库 A 复制一份一模一样的，文件夹名字随意，在文章后面我称之为仓库 B，并查看当前文件夹的文件列表，参考命令如下所示：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test201907</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">test201910</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕后，返回的信息，如下图所示：</p><p><img src="'+p+'" alt="图片描述"></p><p>在上图中，可以看到已经成功的复制了一份代码，接着我们通过 <code>cd test201907</code> 命令进入 A 仓库，并修改文件，同时去查看文件的修改状态，参考命令，如下所示：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">远端覆盖本地A仓库内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.php</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后返回的仓库状态如下图所示：</p><p><img src="'+t+'" alt="图片描述"></p><p>可以看到 index.php 文件已经被成功修改，接着我们将修改的文件通过 <code>git commit</code> 命令提交到 Git 版本中去，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit . -m &#39;远端覆盖本地测试仓库A&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的提示信息如下图：</p><p><img src="'+l+'" alt="图片描述"></p><p>在图中，可以看到已经成功将修改提交到 Git 仓库当中，接着将新的版本推送到远端，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，远程仓库返回的信息如下图所示：</p><p><img src="'+o+'" alt="图片描述"></p><p>在上图中可以看到，已经成功将新的版本记录推送到远程仓库当中，接着我们再去 B 仓库中去构建错误的提交。</p><h3 id="_17-1-2-构建错误记录" tabindex="-1">17.1.2 构建错误记录 <a class="header-anchor" href="#_17-1-2-构建错误记录" aria-label="Permalink to &quot;17.1.2 构建错误记录&quot;">​</a></h3><p>通过 <code>cd ../test201910</code> 命令进入 B 仓库，同样修改一个代码文件，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;空文件&#39; &gt; index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>修改代码文件之后，同样适用 <code>git commit</code> 提交修改到版本控制器当中，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;误操作&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="'+i+'" alt="图片描述"></p><p>在上图中可以看到成功提交版本记录，接着我们使用 <code>git log</code> 命令来查看提交记录，参考命令如下</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令后，返回的版本记录历史，如下图所示：</p><p><img src="'+c+'" alt="图片描述"></p><p>在上图中可以看到刚才提交的记录，B 仓库的错误提交已经构建完成；整个实验场景复现完毕，A 仓库正确的代码已经推送到远程服务器；B 仓库提交了错误代码，想让远程仓库的代码完全覆盖到本地，下面我们复现这个过程。</p><h2 id="_17-2-覆盖本地" tabindex="-1">17.2 覆盖本地 <a class="header-anchor" href="#_17-2-覆盖本地" aria-label="Permalink to &quot;17.2 覆盖本地&quot;">​</a></h2><p>首先拉取远程最新的代码，这里不使用 <code>git pull</code> 而是使用 <code>git fetch</code>，因为 <code>git pull</code> 拉取远程最新分支之后，会自动对本地分支进行合并，而 <code>git fetch</code> 则只会拉取远程分支不进行自动合并，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="'+r+'" alt="图片描述"></p><p>从上图中可以看出已经成功获取远程仓库的信息，接下来我们通过 <code>git log</code> 命令查看提交记录是有改变，以此来验证 <code>git fetch</code> 不会自动合并的特点，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的版本信息如下图所示：</p><p><img src="'+d+'" alt="图片描述"></p><p>在上图中可以看出并没有增加版本记录，说明没有进行自动合并。接着我们学习一下 <code>git reset</code> 命令的一种使用方法，命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset --hard origin/master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这条命令中，<code>--hard</code> 为 <code>git reset</code> 的选项，它的作用是 reset 之后把当前工作的差异部分丢弃掉，完全与目标一致，<code>origin/master</code> 则是目标比较分支，命令执行后，返回的信息如下图所示：</p><p><img src="'+m+'" alt="图片描述"></p><p>在图中可以看到 Git 提示，当前的位置已经处于 A 仓库推送的位置。但这里还看不出 B 仓库提交的记录是否还存在，以及代码本身是否已经与远程保持一致，这里我们可以通过 <code>git status</code> 来确定工作区是否有修改，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，可以看到工作区的状态，返回信息如下图所示：</p><p><img src="'+g+'" alt="图片描述"></p><p>在上图中可以看到工作区的文件与最新版本并没有差异，接着再通过 <code>git log</code> 确认版本记录是否与远程一致，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，可以看到当前仓库的版本记录列表，返回的信息如下图所示：</p><p><img src="'+u+'" alt="图片描述"></p><p>在上图中可以看到版本记录已经发生了变化，错误的提交版本已经不存在，A 仓库正确的代码已经到了 B 仓库当中，到此整个远程仓库覆盖本地实验已经完成。</p><h2 id="_17-3-小结" tabindex="-1">17.3 小结 <a class="header-anchor" href="#_17-3-小结" aria-label="Permalink to &quot;17.3 小结&quot;">​</a></h2><p>在这一节中学习了，让本地仓库完全与远程仓库保持一致，并且以远程仓库为基准的操作方式，主要的操作流程有两点:</p><ol><li>使用 <code>git fetch</code> 拉取远程仓库信息（不会自动进行合并）;</li><li>使用 <code>git reset --hard origin/分支名</code> 命令将远程仓库完全覆盖本地仓库。</li></ol>',59),_=[b];function C(y,A,v,D,f,k){return a(),e("div",null,_)}const q=s(h,[["render",C]]);export{B as __pageData,q as default};

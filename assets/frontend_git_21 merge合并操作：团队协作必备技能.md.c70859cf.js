import{_ as e,o as s,c as a,U as p}from"./chunks/framework.76b79cb5.js";const n="/assets/5e9d4589000137c405980112.c5234b82.png",t="/assets/5e9d45900001135008080078.c2eaf594.png",i="/assets/5e9d45990001949f06120112.ba62efae.png",c="/assets/5e9d45a00001673706120078.4721620b.png",o="/assets/5e9d45a70001c9bc05770146.f853ec37.png",l="/assets/5e9d45ad000106f505770078.3d7d35c8.png",d="/assets/5e9d45b30001149306960112.6caa61df.png",r="/assets/5e9d45b90001705a06960078.a15413a4.png",m="/assets/5e9d45c00001516706960112.6689cc49.png",g="/assets/5e9d45c5000162be06960078.0b581d22.png",u="/assets/5e9d45ca0001499a05630112.a8996308.png",b="/assets/5e9d45d00001987305770146.e9cc1ca3.png",h="/assets/5e9d45d9000159fa05770146.94023988.png",v="/assets/5e9d45ea0001eabb06330248.6956e18d.png",_="/assets/5e9d45f4000102c806330248.5c03c7de.png",C="/assets/5e9d45fd0001b89706330078.bb4c6de0.png",f="/assets/5e9d46090001f55807380078.65f4c06c.png",y="/assets/5e9d46140001637307590112.0d350ac3.png",A="/assets/5e9d461f000120a907590078.c15f8984.png",k="/assets/5e9d46260001cade07590095.6a51be2b.png",D="/assets/5e9d462e0001414806680078.2f0433a2.png",q="/assets/5e9d463600012eb706680078.239c38d6.png",w="/assets/5e9d463c0001f94606680095.caf61f9b.png",x="/assets/5e9d46440001947a06680197.3dc5ab7f.png",P="/assets/5e9d464d00014b6306680112.c858b84c.png",G="/assets/5e9d465400010d8806680078.a65f7da6.png",T="/assets/5e9d465d0001fdbe06680095.3cb1aac1.png",S="/assets/5e9d46650001f80e06680180.00f07494.png",z=JSON.parse('{"title":"21 merge合并操作：团队协作必备技能","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/21 merge合并操作：团队协作必备技能.md","filePath":"frontend/git/21 merge合并操作：团队协作必备技能.md"}'),$={name:"frontend/git/21 merge合并操作：团队协作必备技能.md"},N=p(`<h1 id="_21-merge合并操作-团队协作必备技能" tabindex="-1">21 merge合并操作：团队协作必备技能 <a class="header-anchor" href="#_21-merge合并操作-团队协作必备技能" aria-label="Permalink to &quot;21 merge合并操作：团队协作必备技能&quot;">​</a></h1><p>合并代码是Git在团队协作中一个非常重要的功能，在这一节当中主要讲解合并代码的作用、如何实现代码合并、以及合并代码中的冲突解决方法等。</p><h2 id="_21-1-构建环境" tabindex="-1">21.1 构建环境 <a class="header-anchor" href="#_21-1-构建环境" aria-label="Permalink to &quot;21.1 构建环境&quot;">​</a></h2><p>以我公司为例，有三个分支，develop、test、master三个分支；develop为开发分支，日常在这个分支下开发功能，test分支为功能测试分支，面向测试同事，master分支为生产环境的代码，面向用户；</p><p>在接到新功能之后，大家会在 develop 分支下共同开发，觉得没问题之后，会通过<code>git merge</code>将 develop 代码合并到 test 分支中，然后发布到测试服务器，当测试通过后，会再次将 test 分支的代码合并到 master 分支中去。</p><h3 id="_21-1-1-构建环境" tabindex="-1">21.1.1 构建环境 <a class="header-anchor" href="#_21-1-1-构建环境" aria-label="Permalink to &quot;21.1.1 构建环境&quot;">​</a></h3><p>为了演示代码合并的整个流程，我们构造一个合并代码的环境，用来演示代码合并，首先我们在 master 分支上新建两个分支 <code>test</code>、<code>develop</code>，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout -b test </span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>命令执行完毕之后，Git 返回的文件状态信息如下图所示：</p><p><img src="`+n+'" alt="图片描述"></p><p>在上图中可以看到新建了两个分支，并且切换到了<code>develop</code>分支中，此分支我们一般用于开发；下面我将在此分支中修改配置文件，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mkdir config &amp;&amp; echo &#39;&lt;?php echo 123;&#39; &gt; config/config.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会创建一个文件夹和一个配置文件，并写入配置内容，终端如下图所示</p><p><img src="'+t+'" alt="图片描述"></p><p>在上图中可以看到<code>config.php</code>文件已经创建完毕，我们将此文件提交到新版本中，提交代码参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;新增配置文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回信息如下图所示</p><p><img src="'+i+'" alt="图片描述"></p><p>在上图中可以看到已经将配置文件成功提交到新版本当中，但这个提交只是在 develop 分支上，如果我们想让测试人员给我们测试还需要发布到<code>test</code>分支当中，这个时候我们就可以进行合并操作。</p><h2 id="_21-2-合并代码" tabindex="-1">21.2 合并代码 <a class="header-anchor" href="#_21-2-合并代码" aria-label="Permalink to &quot;21.2 合并代码&quot;">​</a></h2><p>为了让测试人员能够测试到我们开发的功能，我们需要将<code>develop</code>分支的新版本同步到<code>test</code>分支中，这个同步的过程有多种方式，但最常见的就是使用<code>git merge</code>命令，也就是合并代码操作； 在执行代码合并的时候，我们需要将分支切换到<code>test</code>分支上，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout  test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，终端的信息如下图所示：</p><p><img src="'+c+'" alt="图片描述"></p><p>在上图中可以看到已经成功切换到<code>test</code>分支中，现在就可以使用<code>git merge</code>命令将<code>develop</code>分支合并到<code>test</code>分支中，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如果两个分支以往的历史没有差异部分，则会将<code>develop</code>提交的版本直接复制过来，如下图所示：</p><p><img src="'+o+'" alt="图片描述"></p><p>在上图中可以看到在<code>develop</code>分支中提交的<code>config.php</code>文件被合并过来，为了验证一下这个提示信息，可以去查看配置文件，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ls config/*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会列出<code>config/</code>目录下的文件信息，如下图所示</p><p><img src="'+l+`" alt="图片描述"></p><p>在上图中可以看到文件确实已经存在，说明文件已经成功合并过来。</p><h2 id="_21-3-代码冲突" tabindex="-1">21.3 代码冲突 <a class="header-anchor" href="#_21-3-代码冲突" aria-label="Permalink to &quot;21.3 代码冲突&quot;">​</a></h2><p>现在我们要看一种新情况，<code>test</code>分支是给测试人员测试用的，而<code>develop</code>分支是给开发人员使用，因此代码所处的环境略有差异。</p><h3 id="_21-3-1-构建冲突环境" tabindex="-1">21.3.1 构建冲突环境 <a class="header-anchor" href="#_21-3-1-构建冲突环境" aria-label="Permalink to &quot;21.3.1 构建冲突环境&quot;">​</a></h3><p>比如说数据库的连接地址和<code>develop</code>的开发环境是不一样的，因此我们可能会直接在<code>test</code>分支中去修改配置文件，修改配置文件命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;idaxia&#39; &gt; config/config.php </span></span>
<span class="line"><span style="color:#A6ACCD;">git commit . -m &#39;修改配置文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在修改完配置文件之后，同样需要提交到<code>test</code>分支，如下图所示：</p><p><img src="`+d+'" alt="图片描述"></p><p>在上图中可以看到修改的信息已经提交到<code>test</code>分支当中，于是继续回到<code>develop</code>分支当中去开发新功能， 切回 develop 分支执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout  develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回信息如下图所示：</p><p><img src="'+r+`" alt="图片描述"></p><p>在上图中可以看到已经成功切换回<code>develop</code>分支中，在开发途中我发现我之前填写的信息不正确，想修改配置文件，执行了如下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;qingsong&#39; &gt; config/config.php  </span></span>
<span class="line"><span style="color:#A6ACCD;">git commit . -m &#39;修改配置文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改配置文件内容之后，再次进行了 commit 提交操作，如下图所示：</p><p><img src="`+m+'" alt="图片描述"> 在上图中可以看到已经提交成功；</p><h3 id="_21-3-2-冲突现场" tabindex="-1">21.3.2 冲突现场 <a class="header-anchor" href="#_21-3-2-冲突现场" aria-label="Permalink to &quot;21.3.2 冲突现场&quot;">​</a></h3><p>按照我们的合并流程，我们之后必定会切换到 test 分支，然后将<code>develop</code>的代码合并过去。但这个时候就产生了一个新的代码冲突问题，我们接着往下看，首先将当前分支切回<code>test</code>，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，如下图所示：</p><p><img src="'+g+'" alt="图片描述"></p><p>在上图中可以看到已经切换到了<code>test</code>分支中，然后我们继续使用<code>git merge</code>进行分支合并，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的合并信息如下图所示：</p><p><img src="'+u+'" alt="图片描述"></p><p>在上图中可以看到提示代码冲突，因为我们在两个分支中都提交了新的版本，而且还在同一个文件同一行当中，Git 无法判断我们需要使用哪一个版本，便会给出这样的提示。</p><h3 id="_21-3-3-冲突解决" tabindex="-1">21.3.3 冲突解决 <a class="header-anchor" href="#_21-3-3-冲突解决" aria-label="Permalink to &quot;21.3.3 冲突解决&quot;">​</a></h3><p>遇到这种代码冲突时候，需要我们人工去解决合并冲突，可以使用 vim 命令删除冲突中的多余代码，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim config/config.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 vim 打开冲突的文件之后，可以看到冲突的内容，如下图所示：</p><p><img src="'+b+'" alt="图片描述"></p><p>在上图中，可以看到冲突符号以<code>&lt;&lt;&lt;&lt;&lt;&lt;</code>开始，以<code>======</code>符号为分界符号，上面的是当前<code>test</code>的，下面的是<code>develop</code>分支的，最后以<code>&gt;&gt;&gt;&gt;&gt;&gt;</code>为结束符； 我们需要删除多余代码和冲突发，只保留我们需要在当前分支需要保留的内容即可，删除多余的内容后如下图所示：</p><p><img src="'+h+'" alt="图片描述"></p><p>在上图中可以看到我只保留了 idaxia 这一部分内容，其他内容因为不需要，所以都删除了，接着我们需要使用<code>git add</code>将冲突的文件重新添加到工作区中，并提交一个新的版本，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add .  &amp;&amp; git commit -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>解决冲突后这里提交版本的方式稍微有一些区别，会在<code>git commit</code> 后面增加一个<code>-a</code>参数，而且不需要<code>-m</code>参数；但是执行之后会单独多出一个步骤让你填写冲突解决的备注信息，如下图所示：</p><p><img src="'+v+'" alt="图片描述"></p><p>在上图中会默认生成一些备注信息，你也可以增加或删减部分信息，然后用<code>:wq</code>或者<code>:x</code>进行保存并退出，退出之后会新增加一个版本，可以使用<code>git log</code>命令查看版本记录，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的信息如下图所示：</p><p><img src="'+_+'" alt="图片描述"></p><p>在上图中可以看到多出两个个版本信息，最下面一个是来自于<code>git merge</code>合并的消息，而最上面一个则来自于解决冲突后新提交的一个版本。</p><h2 id="_21-4-避免代码冲突" tabindex="-1">21.4 避免代码冲突 <a class="header-anchor" href="#_21-4-避免代码冲突" aria-label="Permalink to &quot;21.4 避免代码冲突&quot;">​</a></h2><p>上面虽然解决了代码冲突问题，但是操作起来比较繁琐，而且还容易在解决冲突的过程当中出错，所以并不是一个上策。</p><h3 id="_21-4-1-避免冲突原理" tabindex="-1">21.4.1 避免冲突原理 <a class="header-anchor" href="#_21-4-1-避免冲突原理" aria-label="Permalink to &quot;21.4.1 避免冲突原理&quot;">​</a></h3><p>在 Git 中给我们提供了此类问题的解决办法，当一个文件需要在不同分支中独立时，可以针对此文件做一些额外设置，这样便不会出现冲突问题，我们现在切回 develop 分支，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="'+C+'" alt="图片描述"></p><p>在上图中可以看到已经切换回 develop 分支中，接下来我需要针对配置文件<code>config.php</code>文件做一些配置，这里需要用到一个 Git 仓库当中的特殊文件<code>.gitattributes</code>和之前的忽略文件类似，它们都是 Git 中的一个特殊文件;我们在里面增加文件并设置参数，当 Git 在触发动作的时候会检查这个规则列表，比如我们接下来设置<code>merge=ours</code>的参数便是合并是排除它，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;/config/config.php merge=ours&#39; &gt; .gitattributes &amp;&amp; cat .gitattributes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会往<code>.gitattributes</code>文件里面写入<code>/config/config.php merge=ours</code>内容，如下图所示：</p><p><img src="'+f+'" alt="图片描述"></p><p>在上图中可以看到，通过 cat 命令已经将文件内容显示出来了，我们先将此文件提交一个版本，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;忽略合并测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="'+y+'" alt="图片描述"></p><p>在上图中可以看到 ，已经将<code>.gitattributes</code>提交成功。</p><h3 id="_21-4-2-制造冲突环境" tabindex="-1">21.4.2 制造冲突环境 <a class="header-anchor" href="#_21-4-2-制造冲突环境" aria-label="Permalink to &quot;21.4.2 制造冲突环境&quot;">​</a></h3><p>接下来我在<code>develop</code>修改配置文件<code>config.php</code>文件提交，然后去<code>test</code>分支中修改并提交，再次进行合并，验证是否还会冲突；现在我首先随意修改配置文件，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;tang&#39; &gt; config/config.php &amp;&amp; cat config/config.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会将配置文件的内容修改并查看，如下图所示：</p><p><img src="'+A+'" alt="图片描述"></p><p>在上图中可以看到，文件内容已经修改成功，接下来我将<code>config.php</code>的修改也提交到新版本当中，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;忽略合并测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 提示的如下图所示：</p><p><img src="'+k+'" alt="图片描述"></p><p>在上图中可以看到 ，已经成功将修改提交到新的版本当中；接着我切回到test分支，然后也去修改<code>config.php</code>的内容，切回<code>test</code>分支的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout  test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下如下图所示：</p><p><img src="'+D+'" alt="图片描述"></p><p>在上图中可以看到已经成功切换到了<code>test</code>分支当中，下面我同样随意修改配置文件的内容，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo &#39;测试忽略效果&#39; &gt; config/config.php &amp;&amp; cat config/config.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，会将新内容写到<code>config.php</code>文件中并查看文件的内容，如下图所示：</p><p><img src="'+q+'" alt="图片描述"></p><p>在上图中可以看到已经修改配置文件内容成功，然后同样提交到新版本中，参考命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;忽略合并测试 v4&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的提示信息如下图所示：</p><p><img src="'+w+'" alt="图片描述"></p><p>在上图中可以看到在 test 分支中的修改已经成功提交到新版本中。</p><h3 id="_21-4-3-验证屏蔽冲突效果" tabindex="-1">21.4.3 验证屏蔽冲突效果 <a class="header-anchor" href="#_21-4-3-验证屏蔽冲突效果" aria-label="Permalink to &quot;21.4.3 验证屏蔽冲突效果&quot;">​</a></h3><p>下面我们就开始合并代码，查看合并时是否还会冲突，合并代码的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，出现了 vim 的编辑页面如下图所示：</p><p><img src="'+x+'" alt="图片描述"></p><p>在上图中可以看到直接展示了填写备注信息的提示界面，而没有之前提示的冲突信息，我们使用<code>:x</code>进行保存并退出，接着看 Git 给出的提示信息，如下图所示：</p><p><img src="'+P+'" alt="图片描述"></p><p>在上图中可以看到提示我们增加了一个文件<code>.gitattributes</code>文件，并没有变更<code>config.php</code>文件，说明两个分支成功保留了特定文件的独特性；为了验证我们的猜想，我们使用<code>cat</code>命令查看配置文件是否被修改，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cat config/config.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，展示的信息如下图所示：</p><p><img src="'+G+'" alt="图片描述"></p><p>在上图中可以看到<code>config.php</code>里面的内容依然是我们刚才在<code>test</code>分支中提交的内容，说明猜想是成功的；</p><h2 id="_21-5-合并代码到正式环境" tabindex="-1">21.5 合并代码到正式环境 <a class="header-anchor" href="#_21-5-合并代码到正式环境" aria-label="Permalink to &quot;21.5 合并代码到正式环境&quot;">​</a></h2><p>假设此时测试人员测试通过后，我们需要将代码发布到正式的生产环境，我们这个时候就切换到 master 分支中去，然后进行合并代码，此时 master 应该从 test 分支中进行合并，而不是从 develop 分支合并，因为 test 分支才是稳定的版本，切换到<code>master</code>分支执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="'+T+'" alt="图片描述"></p><p>从上图中可以看到已经成功切换到 master 分支中，接下来我们把 test 分支合并到 master 分支中去，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="'+S+'" alt="图片描述"></p><p>在上图中可以看到两个文件都被合并了过来，虽然我们在<code>.gitattributes</code>文件中设置忽略<code>config.php</code>文件的冲突，但是在不冲突的情况依然会进行合并的。</p><h2 id="_21-6-小结" tabindex="-1">21.6 小结 <a class="header-anchor" href="#_21-6-小结" aria-label="Permalink to &quot;21.6 小结&quot;">​</a></h2><p>主要讲解了团队协作的模式，合并代码的操作流程，合并代码冲突的解决方法，需要注意以下几点：</p><ol><li>代码合并时注意合并的次序，应该是<code>开发分支</code>=&gt;<code>测试分支</code>=&gt;<code>生产分支</code>；</li><li>尽量分模块编写代码，减少多人同时编辑一个文件的几率，减少冲突概率；</li><li>配置文件应该使用<code>.gitattributes</code>进行标注，避免代码冲突问题。</li></ol>',137),V=[N];function B(E,I,J,O,R,U){return s(),a("div",null,V)}const F=e($,[["render",B]]);export{z as __pageData,F as default};

import{_ as s,o as a,c as n,U as e}from"./chunks/framework.76b79cb5.js";const l="/assets/5e9d2b770001bd5211420700.e04ccee7.png",y=JSON.parse('{"title":"03 初识Git : 本地创建一个 Git 仓库","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/03 初识Git  本地创建一个 Git 仓库.md","filePath":"frontend/git/03 初识Git  本地创建一个 Git 仓库.md"}'),o={name:"frontend/git/03 初识Git  本地创建一个 Git 仓库.md"},p=e('<h1 id="_03-初识git-本地创建一个-git-仓库" tabindex="-1">03 初识Git : 本地创建一个 Git 仓库 <a class="header-anchor" href="#_03-初识git-本地创建一个-git-仓库" aria-label="Permalink to &quot;03 初识Git : 本地创建一个 Git 仓库&quot;">​</a></h1><p>在上一节内容中，我们已经将 Git 环境安装好，从这一节开始我们开始正式接触 Git 的操作命令，从最简单的开始，循序渐进。在这一节中，我们通过本地创建一个 Git 版本库来初步认识 Git 版本库，以及 Git 的一些必要的配置。</p><h2 id="_3-1-创建版本库" tabindex="-1">3.1 创建版本库 <a class="header-anchor" href="#_3-1-创建版本库" aria-label="Permalink to &quot;3.1 创建版本库&quot;">​</a></h2><p>我们首先创建文件夹<code>test</code>，这个文件夹用于版本管理的根目录。如果在 Windows 下我们也可以单击鼠标右键，在菜单中选择新建文件夹，然后把文件夹名字改为<code>test</code>就可以了。如果在 Linux 或者 Mac 系统下，可以通过命令<code>mkdir</code>创建文件夹，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mkdir test &amp;&amp; cd test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来不管什么系统，都打开终端，并在终端中通过<code>cd</code>命令的方式进入文件夹，然后就可以使用<code>git init</code>命令初始化一个仓库了，参考执行命令如下：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令之后，Git 会进行一系列的初始化操作，当你看到<code>Initialized empty Git repository in /Users/song/test/.git/</code>提示，说明已经成功创建一个版本库，同时你会发现光标左侧比之前多出几个字符<code>git:(master)</code>，这是因为我们在第二节的时候安装了<code>oh-my-zsh</code>主题所导致。</p><p>当<code>oh-my-zsh</code>发现当前目录下存在<code>.git</code>文件夹，便会读取当前版本库的信息，并把当前版本库所在的分支名显示在光标左侧；而当你通过 <code>cd..</code> 命令跳出版本库的目录时候，光标左侧的<code>git:(master)</code>提示也会随着消失，如下图所示<img src="'+l+`" alt="图片描述"></p><p>刚才说到初始化版本库会在当前目录中创建一个<code>.git</code>的文件夹，我们可以重新进入版本库根目录，然后通过命令<code>ls -al</code>进行查看，如下命令所示：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git:</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">master</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-al</span></span>
<span class="line"><span style="color:#FFCB6B;">total</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">drwxr-xr-x</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">song</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">staff</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">96</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#C3E88D;">:11</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">drwxr-xr-x</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">song</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">staff</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">256</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#C3E88D;">:11</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span></span>
<span class="line"><span style="color:#FFCB6B;">drwxr-xr-x</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">song</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">staff</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">320</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#C3E88D;">:49</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-1-1-认识-git" tabindex="-1">3.1.1 认识<code>.git</code> <a class="header-anchor" href="#_3-1-1-认识-git" aria-label="Permalink to &quot;3.1.1 认识\`.git\`&quot;">​</a></h3><p>在生成的 .git 目录中，里面包含了整个版本库的信息，我们可以通过命令<code>cd .git &amp;&amp; ls -al</code>进入 .git 文件夹中查看具体有哪些文件：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">➜  .git git:(master) ls -al</span></span>
<span class="line"><span style="color:#A6ACCD;">total 24</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x  10 song  staff  320  6 25 22:11 .</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x   3 song  staff   96  6 25 22:11 ..</span></span>
<span class="line"><span style="color:#A6ACCD;">-rw-r--r--   1 song  staff   23  6 25 22:11 HEAD</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x   2 song  staff   64  6 25 22:11 branches</span></span>
<span class="line"><span style="color:#A6ACCD;">-rw-r--r--   1 song  staff  137  6 25 22:11 config</span></span>
<span class="line"><span style="color:#A6ACCD;">-rw-r--r--   1 song  staff   73  6 25 22:11 description</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x  13 song  staff  416  6 25 22:11 hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x   3 song  staff   96  6 25 22:11 info</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x   4 song  staff  128  6 25 22:11 objects</span></span>
<span class="line"><span style="color:#A6ACCD;">drwxr-xr-x   4 song  staff  128  6 25 22:11 refs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这些目录可能我们会比较陌生，在后面的章节当中我们会略有涉及，因此，在这节当中先简单了解一下这些文件夹的作用：</p><ul><li><code>HEAD</code> 文件指示目前被检出的分支</li><li><code>branches</code> 新版本已经废弃无须理会</li><li><code>description</code>用来显示对仓库的描述信息</li><li><code>config</code> 文件包含项目特有的配置选项</li><li><code>info</code> 目录包含一个全局性排除文件</li><li><code>hooks</code> 目录包含客户端或服务端的钩子脚本</li><li><code>index</code> 文件保存暂存区信息</li><li><code>objects</code> 目录存储所有数据内容</li><li><code>refs</code> 目录存储分支的提交对象的指针</li></ul><h2 id="_3-2-基础配置" tabindex="-1">3.2 基础配置 <a class="header-anchor" href="#_3-2-基础配置" aria-label="Permalink to &quot;3.2 基础配置&quot;">​</a></h2><p>在建立完项目的版本库之后，后续对代码的管理操作都会要求要有一个身份，所以需要你在管理操作之前，配置一个昵称和邮箱，这个昵称和邮箱仅仅是在查看改动记录时候用的，和后面的鉴权没有关系。</p><h3 id="_3-2-1-查看配置信息" tabindex="-1">3.2.1 查看配置信息 <a class="header-anchor" href="#_3-2-1-查看配置信息" aria-label="Permalink to &quot;3.2.1 查看配置信息&quot;">​</a></h3><p>在设置昵称和邮箱之前，可以先检查一下之前有没有配置过昵称和邮箱 查看昵称的命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config user.name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看邮箱的命令如下:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config user.email</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-2-2-设置配置信息" tabindex="-1">3.2.2 设置配置信息 <a class="header-anchor" href="#_3-2-2-设置配置信息" aria-label="Permalink to &quot;3.2.2 设置配置信息&quot;">​</a></h3><p>如果执行上面的命令没有返回相应的昵称和邮箱，说明你还没有配置昵称和邮箱。那么就需要进行配置 配置昵称的命令参考如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.name &quot;你的昵称&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>配置邮箱的命令参考如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.email &quot;你的邮箱&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-2-3-修改配置信息" tabindex="-1">3.2.3 修改配置信息 <a class="header-anchor" href="#_3-2-3-修改配置信息" aria-label="Permalink to &quot;3.2.3 修改配置信息&quot;">​</a></h3><p>在配置中如果不小心配置错了，或者后面想修改配置的时候，是不能通过重复执行上面的设置昵称命令，来修改昵称的，邮箱修改同理。如果你多次设置昵称，它会在命令执行后提示你无法重复配置或者可能不给你提示，但是这种情况会导致一个 key 配置了多个 value 的问题。</p><p>不过，修改的时候，可以通过特定的方式去修改，这里我介绍两种方法， 第一种是通过命令行，第二种是通过修改配置文件。</p><h4 id="命令行修改配置" tabindex="-1">命令行修改配置 <a class="header-anchor" href="#命令行修改配置" aria-label="Permalink to &quot;命令行修改配置&quot;">​</a></h4><p>通过命令行修改的方式比较简单，直接执行以下的命令即可 修改昵称参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global --replace-all user.name &quot;your user name&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>修改邮箱地址参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global --replace-all user.email&quot;your user email&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="修改配置文件" tabindex="-1">修改配置文件 <a class="header-anchor" href="#修改配置文件" aria-label="Permalink to &quot;修改配置文件&quot;">​</a></h4><p>修改文件的方式，主要是修改位于主目录下<code>.gitconfig</code> 文件。在 Linux 和 Mac 中，可以通过 vim 命令进行直接编辑，比如<code>vim ~/.gitconfig</code> ；Windows 系统同样位于用户主目录下，假设你当前的用户是<code>administrator</code>，那么对应的配置文件的路径应该是 <code>C:\\Users\\administrator\\.gitconfig</code>，可以直接使用记事本修改里边的 name 或者 email。</p><p>如果之前已经配置过昵称和邮箱的情况下，当使用 vim 或者记事本打开配置文件之后，可以看到如下配置：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[user]</span></span>
<span class="line"><span style="color:#A6ACCD;">        name = daxia</span></span>
<span class="line"><span style="color:#A6ACCD;">        email = 78778443@qq.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在如果有重复的 name 或 email，可以将其删掉，只剩下一个就好。修改完，通过 git bash 输入 <code>git config –list</code>可以查看是否修改成功了。</p><h2 id="_3-3-小结" tabindex="-1">3.3 小结 <a class="header-anchor" href="#_3-3-小结" aria-label="Permalink to &quot;3.3 小结&quot;">​</a></h2><p>这一节中主要讲到了如何创建一个本地版本库、版本库的大体结构 、基础配置方法等。</p><ol><li>在空文件夹中，可以通过命令<code>git init</code>创建一个本地版本库；</li><li>每个版本库的根目录下，都存放着一个<code>.git</code>的隐藏文件夹，里面包含版本库的全部信息；</li><li>管理版本库必须有一个身份，需要设置昵称和邮箱。</li></ol>`,44),t=[p];function r(i,c,d,C,u,m){return a(),n("div",null,t)}const g=s(o,[["render",r]]);export{y as __pageData,g as default};

import{_ as s,o as e,c as a,U as n}from"./chunks/framework.76b79cb5.js";const l="/assets/5e9d4b5b00010c8f14480326.242b2d78.png",p="/assets/5e9d4b610001710514480496.92dcaaff.png",t="/assets/5e9d4b680001cbf514480496.ba306ddc.png",o="/assets/5e9d4b92000141d514480190.d822af12.png",c="/assets/5e9d4b9a00011aec14480462.fd1850e4.png",i="/assets/5e9d4b9f0001619c14480258.3e4b8410.png",r="/assets/5e9d4ba70001dbe414480360.08e81a47.png",d="/assets/5e9d4bb300017e6314480496.b934858f.png",m="/assets/5e9d4bba0001138314480190.d70b4df2.png",b="/assets/5e9d4bc10001742414480428.81eca932.png",g="/assets/5e9d4bc600010e5014480190.3d68b64e.png",u="/assets/5e9d4bcc0001d0d714480156.7e473ae6.png",C="/assets/5e9d4bd60001ca8214480360.f8fbfc74.png",h="/assets/5e9d4be20001459b14480190.6dcaa68a.png",y="/assets/5e9d4bea000127ad14480224.d15913ae.png",v="/assets/5e9d4bf3000141f114480632.6c83204d.png",A="/assets/5e9d4bfb0001222114480292.a0208d3c.png",_="/assets/5e9d4c030001c08714480360.e94fc253.png",D="/assets/5e9d4c0b00010ce614480122.41d774ea.png",F="/assets/5e9d4c110001ab2b14480156.fb1c526a.png",k="/assets/5e9d4c19000107ef14480360.0dff7ff8.png",f="/assets/5e9d4c220001c32614480156.2669a043.png",G="/assets/5e9d4c29000187a414480360.a5f1adf7.png",x="/assets/5e9d4c330001309514480292.5b96ef55.png",w="/assets/5e9d4c3d000115d914480258.828939c5.png",E="/assets/5e9d4c450001a09314480360.1f925076.png",B="/assets/5e9d4c4e00013e6b14480326.cccb2610.png",q="/assets/5e9d4c330001309514480292.5b96ef55.png",U=JSON.parse('{"title":"28 代码冲突解决：多人提交代码发生冲突解决方法","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/28 代码冲突解决：多人提交代码发生冲突解决方法.md","filePath":"frontend/git/28 代码冲突解决：多人提交代码发生冲突解决方法.md"}'),P={name:"frontend/git/28 代码冲突解决：多人提交代码发生冲突解决方法.md"},T=n('<h1 id="_28-代码冲突解决-多人提交代码发生冲突解决方法" tabindex="-1">28 代码冲突解决：多人提交代码发生冲突解决方法 <a class="header-anchor" href="#_28-代码冲突解决-多人提交代码发生冲突解决方法" aria-label="Permalink to &quot;28 代码冲突解决：多人提交代码发生冲突解决方法&quot;">​</a></h1><p>在团队协作开发中很难完全避免代码冲突问题，第一次遇到冲突时候往往不知道怎么解决，在这节内容里面我将团队协作中遇到的三种冲突解决思路和流程，分别是：拉取远程仓库时候的冲突、<code>rebase</code>复制其他分支版本冲突、暂存区冲突等，合并代码冲突解决方法在第 20 节中已经提到，在这一节中将不再复述。</p><h2 id="_28-1-与远程冲突" tabindex="-1">28.1 与远程冲突 <a class="header-anchor" href="#_28-1-与远程冲突" aria-label="Permalink to &quot;28.1 与远程冲突&quot;">​</a></h2><p>我们平时在提交代码之前通常会拉取一下代码，所以拉取代码命令用的比较多，冲突也比较多常见，下面我把一个代码仓库复制一份出来，分别称之为<code>a仓库</code>和<code>b仓库</code>，然后分别模拟两个用户平时的提交流程，复现一下冲突场景，然后用来演示冲突解决方法，执行复制文件夹命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test201907</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test201911</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-al</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示： <img src="'+l+'" alt="图片描述"> 在上图中，可以看到已经将仓库复制了一份出来，接下来我进入<code>a仓库</code>并在里面修改文件，执行命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test201907</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11111111</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bb.txt</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的工作区修改状态如下图所示： <img src="'+p+'" alt="图片描述"> 在上图中可以看到文件<code>bb.txt</code>已经被修改，我把工作区的修改提交到一个新版本并推送到远程仓库当中，提交并推送所执行的命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">冲突解决v1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 远程仓库返回的提示信息，如下图所示： <img src="'+t+'" alt="图片描述"> 在上图中，可以看到已经改动推送到远程仓库当中，接着进入<code>b仓库</code>中，继续修改代码然后提交到新版本中，执行命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../test201911</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22222</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bb.txt</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">冲突解决V2</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中，可以看到已经将工作区的修改提交到新版本中，接着我们使用<code>git pull</code>命令拉取代码便会产生冲突，因为远程仓库也修改了<code>bb.txt</code>文件，而本地仓库也修改了此文件，Git 不知道以哪一个版本为准，执行命令如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+c+'" alt="图片描述"> 在上图中可以看到拉去远程代码成功了，但是提示自动合并冲突问题，这个时候需要我们手动去编辑文件，将需要的版本保留，不需要的代码删除，这里我使用<code>vim</code>命令编辑冲突文件，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim bb.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，便可以将不需要的代码删除，vim 编辑框如下图所示： <img src="'+i+'" alt="图片描述"> 在上图中可以看到冲突的两个版本内容，远程的版本在下方，而本地的版本在上方，我们只保留<code>22222</code>，然后保存并退出，接着执行<code>git commit -a</code>命令就可以完成解决冲突，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+r+'" alt="图片描述"> 在上图中可以看到 Git 需要输入备注信息，这里可以填写代码冲突解决的一些备注信息，也可以使用默认信息，然后<code>:x</code>保存并退出即可，此时就已经成功解决完冲突，我们可以通过<code>git log</code>命令查看版本记录列，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的版本列表如下图所示： <img src="'+d+'" alt="图片描述"> 在上图中可以看到此时多出了一个<code>Merge branch</code>的版本记录，这个便是我们解决冲突后所生成的，到此我们已经解决完代码冲突问题。</p><h2 id="_28-2-rebase冲突" tabindex="-1">28.2 rebase冲突 <a class="header-anchor" href="#_28-2-rebase冲突" aria-label="Permalink to &quot;28.2 rebase冲突&quot;">​</a></h2><p>当我们使用<code>git rebase</code>命令复制另外一个分支的版本记录到当前分支时候也有可能产生代码冲突问题，我们同样使用一个实例进行演示；</p><p>我们在两个分支中，同时去修改同一个文件并且同一行代码，这样 Git 就不能自动选择版本，从而制造一个冲突出来，我们再看看<code>rebase</code>代码冲突如何解决，首先切换到<code>test</code>分支中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+m+'" alt="图片描述"> 在上图中，可以看到已经成功切换到<code>test</code>分支当中，接着我们随意修改一个代码文件，这里以<code>aa.txt</code>文件为例，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo 33333333 &gt; aa.txt  &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+b+'" alt="图片描述"> 在上图中可以看到文件<code>aa.txt</code>已经被修改，我们将修改的内容提交到一个新版本中去，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit . -m &#39;代码冲突解决 v3&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+g+'" alt="图片描述"> 在上图中可以看到已经将修改提交到工作区，接着我们切换到<code>develop</code>分支当中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+u+'" alt="图片描述"> 在上图中可以看到已经切换到<code>develop</code>分支成功，接着修改<code>aa.txt</code>文件并提交一个版本，执行修改文件命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo 4444444 &gt; aa.txt  &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+C+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件已经被修改，同样我们将工作区的改动提交到新版本当中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit . -m &#39;代码冲突解决 v4&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+h+'" alt="图片描述"> 在上图中可以看到提交新版本已经成功，现在我们切换到<code>test</code>分支中去，然后使用<code>git rebase</code>命令将刚才在<code>develop</code>分支的提交复制到<code>test</code>中去，执行切回到<code>test</code>分支的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+y+'" alt="图片描述"> 在上图中可以看到已经切换到<code>test</code>分支当中去，现在我们使用<code>git rebase</code>命令复制后，应该会出现代码冲突情况，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rebase develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+v+'" alt="图片描述"> 在上图中可以看到果然出现了代码冲突问题，我们接下来就来看看如何处理<code>git rebase</code>导致的代码冲突，同样我们首先使用<code>vim</code>命令，只保留正确的代码，将不正确的代码删除，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim aa.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，vim 界面如下图所示： <img src="'+A+'" alt="图片描述"> 在上图中可以看到冲突的具体内容，我们将上面的<code>44444444</code>保留，其他不需要的内容全部删除，然后让<code>git rebase</code>的任务继续执行，这个时候我们需要使用下面的命令来触发：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git rebase --continue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+_+'" alt="图片描述"> 在上图中可以看到 Git 提示我们没有改动，说明我们的<code>git rebase</code>命令还未完成，还需要我们接着处理。不过一般绝大部分情况下只要我们通过<code>vim</code>清理完不需要的代码保存并退出之后就完事了，我们接着往下看如何处理这种情况。</p><blockquote><p>这里出现没有改动，是因为<code>git rebase</code>命令先将自己的差异版本记录拿到一边去，然后将<code>develop</code>分支的改动复制进来，然后再将自己差异的版本记录插入到末尾，但是我们改动保留了内容<code>4444444</code>，因此就会出现这个提示，具体可以参考第 24 节中的<code>Git rebase</code>命令。</p></blockquote><p>当出现上述提示时，我们可以使用<code>git rebase --skip</code>命令进行忽略，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git rebase --skip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+D+'" alt="图片描述"> 在上图中可以看到已经显示了<code>test</code>的分支名称，说明<code>git rebase</code>命令已经执行完成。</p><h2 id="_28-3暂存区冲突" tabindex="-1">28.3暂存区冲突 <a class="header-anchor" href="#_28-3暂存区冲突" aria-label="Permalink to &quot;28.3暂存区冲突&quot;">​</a></h2><p>跟将工作区的改动暂时存储起来的时候一样，也会出现代码冲突问题，我们以一个小例子为例，首先切换到<code>develop</code>分支中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+F+'" alt="图片描述"> 在上图中可以看到已经切换到了<code>develop</code>分支中，我们随意修改一个代码文件，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo 55555 &gt; aa.txt &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+k+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件被修改，此时我们使用<code>git stash</code>命令将临时修改存储起来，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+f+'" alt="图片描述"> 在上图中可以看到已经将修改暂存成功，接着我再一次去编辑<code>aa.txt</code>文件，然后将内容改为与之前不一样的内容，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo 66666 &gt; aa.txt &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+G+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件处于修改状态了，现在我们使用<code>git commit</code>命令将这个修改提交到新版本中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git git commit . -m &#39;代码冲突解决 v5&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="'+x+'" alt="图片描述"> 在上图中可以看到已经成功，将工作区的改动提交到新版本中了，在这个基础上我再来使用<code>git stash apply</code>命令从暂存区恢复修改，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash apply</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git返回的信息如下图所示： <img src="'+w+'" alt="图片描述"> 在上图中可以看到 Git 提示了代码冲突问题。</p><h3 id="_28-3-1-处理stash冲突" tabindex="-1">28.3.1 处理stash冲突 <a class="header-anchor" href="#_28-3-1-处理stash冲突" aria-label="Permalink to &quot;28.3.1 处理stash冲突&quot;">​</a></h3><p>我们先使用<code>git status</code>查看文件状态，看看工作区当前处于什么状态，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+E+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件为<code>双方修改</code>，说明这个文件存在冲突问题，我们同样使用 vim 命令将里面不需要的代码删掉，留下需要的部分即可，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim aa.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 冲突的代码如下图所示： <img src="'+B+'" alt="图片描述"> 在上图中可以看到暂存区的改动与之前<code>git commit</code>提交的版本存在冲突，我们保留其中一份即可，然后使用<code>git add</code>命令将工作区的修改提交，再查看文件状态，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示： <img src="'+q+'" alt="图片描述"> 在上图中可以看到<code>aa.txt</code>文件已经不再处于<code>双方修改</code>的状态了，此时我们按照正常流程开发即可。</p><h2 id="_28-4-小结" tabindex="-1">28.4 小结 <a class="header-anchor" href="#_28-4-小结" aria-label="Permalink to &quot;28.4 小结&quot;">​</a></h2><p>在这一节中，主要讲解了产生代码冲突的原因，以及处理代码冲突的方法，从代码冲突的过程来看代码冲突。通常是因为一个文件在两个地方（分支或暂存区）被修改，然后又需要在一个地方进行合并，就会让 Git 无法确定使用那一个版本，从而产生代码冲突，让开发者自己来判断，解决代码冲突。</p><p>解决代码冲突通常需要去编辑冲突的文件，将需要的代码进行保留，不需要的代码给删除，清理完不需要的代码之后需要通知 Git 让它继续执行任务，不同场景的冲突，通知 Git 的方式并不一样，分为以下几种：</p><ol><li><code>git merge</code>和<code>git pull</code>命令导致的冲突，处理完冲突后使用<code>git commit -a</code>；</li><li><code>git rebase</code>命令导致的冲突，处理完冲突之后使用<code>git rebase --continue</code>或<code>git rebase --skip</code>；</li><li><code>git stash apply</code>命令导致的冲突，处理完冲突之后使用<code>git add .</code>即可。</li></ol>',73),S=[T];function V($,N,I,J,M,O){return e(),a("div",null,S)}const j=s(P,[["render",V]]);export{U as __pageData,j as default};

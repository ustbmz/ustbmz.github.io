import{_ as s,o as e,c as a,U as n}from"./chunks/framework.76b79cb5.js";const p="/assets/5e9d3f110001a55812240428.fe64ac39.png",t="/assets/5e9d3f1a0001f7df12240428.f407c779.png",i="/assets/5e9d3f210001270e11400326.147381db.png",l="/assets/5e9d3f320001d94506540316.e457491c.png",r="/assets/5e9d3f39000124a606540316.354a7b9a.png",o="/assets/5e9d3f3f00019b3206540316.246df69f.png",c="/assets/5e9d3f470001463506540112.ee749b9d.png",d="/assets/5e9d3f4d000182c806540282.dde74a7b.png",m="/assets/5e9d3f55000103a206540112.c749d365.png",u="/assets/5e9d3f5b0001299106540197.43ad154f.png",q=JSON.parse('{"title":"14 删除过期分支：清理无意义的分支数据","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/14 删除过期分支：清理无意义的分支数据.md","filePath":"frontend/git/14 删除过期分支：清理无意义的分支数据.md"}'),b={name:"frontend/git/14 删除过期分支：清理无意义的分支数据.md"},h=n('<h1 id="_14-删除过期分支-清理无意义的分支数据" tabindex="-1">14 删除过期分支：清理无意义的分支数据 <a class="header-anchor" href="#_14-删除过期分支-清理无意义的分支数据" aria-label="Permalink to &quot;14 删除过期分支：清理无意义的分支数据&quot;">​</a></h1><p>Git 会保留从项目最开始所有的数据，当一个代码仓库长期使用后，会发现代码仓库越来越大，分支也越来越多；这些都会影响到我们 Git 仓库的速度，如果发现一些分支不需要了，我们可以手动删除，以此提高响应速度； 一般两类分支可能需要清理：</p><ol><li>本地不存在，远程存在该分支，但不需要了</li><li>远程不存在，本地存在该分支，也不需要了</li></ol><h2 id="_14-1-清理远程分支" tabindex="-1">14.1 清理远程分支 <a class="header-anchor" href="#_14-1-清理远程分支" aria-label="Permalink to &quot;14.1 清理远程分支&quot;">​</a></h2><p>很多时候我们删除分支实际上只是在本地将分支删除，但远程依然会存在，如果我们确认远程也不需要该分支可以手动删除一下，一般有两个步骤需要操作，首先查看远程分支列表，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令后，结果如下图所示：</p><p><img src="'+p+'" alt="图片描述"> 在图中可以看到本地分支和远程分支，远程分支显示颜色为红色，可以看到都是以 <code>remotes</code> 开头的，把需要删除的分支记录下来，然后执行删除远程分支命令，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push origin --delete dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令后，结果如下图所示： <img src="'+t+'" alt="图片描述"> 在图中可以看到返回了<code>[deleted]</code>等信息，说明我们已经成功将远程分支删除。</p><h2 id="_14-2-清理本地分支" tabindex="-1">14.2 清理本地分支 <a class="header-anchor" href="#_14-2-清理本地分支" aria-label="Permalink to &quot;14.2 清理本地分支&quot;">​</a></h2><p>有些时候我们在本地新建了一个临时分支，或者服务器已经将某一分支删除，本地遗留了很多废弃的分支，当我们想进行清理的时候，如果一个个删除的话效率非常低；这里教大家使用一种比较简单的方法来清理这些分支；我们可以根据分支在远程是否存在作为依据，决定是否将它删除，如果不存在则删除，反之则保留，具体操作如下。</p><h3 id="_14-2-1-模拟场景" tabindex="-1">14.2.1 模拟场景 <a class="header-anchor" href="#_14-2-1-模拟场景" aria-label="Permalink to &quot;14.2.1 模拟场景&quot;">​</a></h3><p>下面我新建一些分支，这些分支只存在本地，来模拟上述提到的情况，新建分支参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout -b test1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，会以当前所处的分支基础上新建一个分支，执行返回结果如下：</p><p><img src="'+i+'" alt="图片描述"></p><p>接着我们查看当前的版本库的分支列表，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果如下：</p><p><img src="'+l+'" alt="图片描述"></p><p>在图中可以看到所有的分支信息，绿色的代表当前所处的分支，红色的代表远程存在的分支，可以看出刚才新建的分支远程中并不存在；</p><p>现在继续将 test1 分支推送到远程服务器当中，推送的参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push --set-upstream origin test1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果如下图所示：</p><p><img src="'+r+'" alt="图片描述"></p><p>在图中可以看到远程仓库提示已经成功新建了一个分支，我们还可以使用查看远程仓库的信息，参考命令如下 ：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git remote show origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行后，返回结果信息如下图所示：</p><p><img src="'+o+'" alt="图片描述"></p><p>在图中可以看到 origin 的具体地址，远程分支列表，以及本地分支与远程分支相对应的关联关系等信息，接下来我们只需要删除远程分支，便完成了模拟场景的最后一步，操作命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push origin --delete test1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令之后，返回结果如下图所示：</p><p><img src="'+c+'" alt="图片描述"></p><p>从图中的返回的信息中可以看出，远程的 test1 分支已经删除成功。</p><h3 id="_14-2-2-清理本地分支" tabindex="-1">14.2.2 清理本地分支 <a class="header-anchor" href="#_14-2-2-清理本地分支" aria-label="Permalink to &quot;14.2.2 清理本地分支&quot;">​</a></h3><p>经过上面的场景模拟，现在我们可以开始进行正式清理分支操作了，首先我们查看分支情况，参考命令如下</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令之后，返回的信息如下图所示</p><p><img src="'+d+'" alt="图片描述"></p><p>从图中可以看出，本地存在 <code>test1</code> 分支，远程不存在此分支；说明远程分支已经被删除，但本地还存在的分支，我们如果想将远程的分支与本地保持一致，直接使用 <code>git pull</code> 是不够的，可以使用 <code>git remote prune origin</code>，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git remote prune origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回信息如下图所示：</p><p><img src="'+m+'" alt="图片描述"></p><p>Git 会将拉取远程的分支信息与本地的进行对比，当发现远程的分支已经删除，便会对本地的分支进行标注；我们可以使用 Git 的命令查看关联失效的分支，参考命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -vv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回结果如下图所示：</p><p><img src="'+u+'" alt="图片描述"></p><p>在分支列表中，test1 分支后面有一个 <code>：gone</code> 的标识，说明远程分支已经被删除，通过这个标识我们能够很清晰的知道该需要删除哪些分支，删除分支的命令参考如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -d test1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_14-3-小结" tabindex="-1">14.3 小结 <a class="header-anchor" href="#_14-3-小结" aria-label="Permalink to &quot;14.3 小结&quot;">​</a></h2><p>在本节内容中主要讲解了如何清理 Git 分支，清理分支主要原因是版本库太大会导致速度变慢，通常会清理两种情况的分支：</p><ol><li>清理远程仓库分支，本地已删除但远程未删除</li><li>清除本地仓库分支，远程已删除但本地未删除的分支</li></ol>',53),g=[h];function _(v,C,f,y,A,k){return e(),a("div",null,g)}const w=s(b,[["render",_]]);export{q as __pageData,w as default};

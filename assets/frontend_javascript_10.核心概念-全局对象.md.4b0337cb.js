import{_ as s,o as n,c as a,U as l}from"./chunks/framework.76b79cb5.js";const d=JSON.parse('{"title":"全局对象","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/10.核心概念-全局对象.md","filePath":"frontend/javascript/10.核心概念-全局对象.md"}'),p={name:"frontend/javascript/10.核心概念-全局对象.md"},o=l(`<h1 id="全局对象" tabindex="-1">全局对象 <a class="header-anchor" href="#全局对象" aria-label="Permalink to &quot;全局对象&quot;">​</a></h1><p>无论是浏览器环境，还是node环境，都会提供一个全局对象</p><ul><li>浏览器环境：window</li><li>node环境：global</li></ul><p>全局对象有下面几个特点：</p><ul><li><p>全局对象的属性可以被直接访问</p></li><li><p>给未声明的变量赋值，实际就是给全局对象的属性赋值</p><blockquote><p>永远别这么干</p></blockquote></li><li><p>所有的全局变量、全局函数都会附加到全局对象</p><blockquote><p>这称之为全局污染，又称之为全局暴露，或简称污染、暴露</p><p>如果要避免污染，需要使用<strong>立即执行函数</strong>改变其作用域</p><p>立即执行函数又称之为IIFE，它的全称是Immediately Invoked Function Expression</p><p><strong>IIFE通常用于强行改变作用域</strong></p></blockquote></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//不希望污染全局</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,6),e=[o];function t(r,c,i,F,y,D){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};

import{_ as s,o as e,c as a,U as n}from"./chunks/framework.76b79cb5.js";const g=JSON.parse('{"title":"1.1. 什么是GitHub","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/Github使用手册.md","filePath":"frontend/git/Github使用手册.md"}'),i={name:"frontend/git/Github使用手册.md"},t=n(`<h1 id="_1-1-什么是github" tabindex="-1">1.1. 什么是GitHub <a class="header-anchor" href="#_1-1-什么是github" aria-label="Permalink to &quot;1.1. 什么是GitHub&quot;">​</a></h1><p>GitHub（网址 <a href="https://github.com/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%A2%E5%90%91%E5%BC%80%E6%BA%90%E5%8F%8A%E7%A7%81%E6%9C%89%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%AA%E6%94%AF%E6%8C%81Git%E4%BD%9C%E4%B8%BA%E5%94%AF%E4%B8%80%E7%9A%84%E7%89%88%E6%9C%AC%E5%BA%93%E6%A0%BC%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%89%98%E7%AE%A1%EF%BC%8C%E6%95%85%E5%90%8DGitHub%E3%80%82" target="_blank" rel="noreferrer">https://github.com/）是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。</a></p><h1 id="_1-2-github亮点" tabindex="-1">1.2. GitHub亮点 <a class="header-anchor" href="#_1-2-github亮点" aria-label="Permalink to &quot;1.2. GitHub亮点&quot;">​</a></h1><p>是什么让GitHub如此成功？GitHub有什么魔力？</p><ol><li><p>只用Git。</p><p>GitHub只支持Git格式的版本库托管，而不像其他开源项目托管平台还对CVS、SVN、Hg等格式的版本库进行托管。GitHub的哲学很简单，既然Git是最好的版本控制系统之一（对于很多喜欢Git和GitHub的人没有之一），没有必要为兼顾其他版本控制系统而牺牲Git某些独有特性。因此没有支持其他版本控制系统的历史负担，是GitHub成功的要素之一。</p><p>只用Git并不是说GitHub完全无视其他版本控制系统的使用者，相反，GitHub面向SVN（Subversion）用户和Hg（Mercurial）用户开发了接口，让这些用户可以使用SVN或Hg的客户端工具访问Git版本库。</p></li><li><p>对Git的完整支持。</p><p>相比其他开源项目托管平台，GitHub对Git版本库提供了完整的协议支持，支持HTTP智能协议、Git-daemon、SSH协议。相比只支持HTTP协议的GoogleCode，GitHub通过SSH协议可以实现版本库访问的无口令认证[<a href="#id3">1]</a>。</p></li><li><p>无处不在的Git。</p><p>除了在版本库托管上使用Git，Git还被GitHub应用到更多领域。维基使用Git，可以通过克隆维基所在的版本库，离线修改维基；在线粘贴数据的Gist网站[<a href="#id4">2]</a>使用Git，记录变更历史；以及在Jekyll应用的帮助下，用Git版本库维护个人网站和博客等。</p></li><li><p>在线编辑文件。</p><p>GitHub提供了在线编辑文件的功能，不熟悉Git的用户也可以直接通过浏览器修改版本库里的文件。</p></li><li><p>社交编程。</p><p>将社交网络引入项目托管平台是GitHub的创举。用户可以关注项目、关注其他用户进而了解项目和开发者动态。项目的派生（Fork）和拉拽请求（Pull Request）构成GitHub最独具一格的工作模式。对提交代码的逐行评注及Pull Request构成了GitHub特色的代码审核。</p></li><li><p>商业上的成功。</p><p>GitHub通过私有版本库托管、面向企业的版本库托管和项目管理平台、人员招聘等付费服务获得了商业上的成功，这种成功使得GitHub不必以页面中嵌入广告的方式维持运营，最大的受益者还是用户。</p></li><li><p>关注细节。</p><p>GitHub网站采用了Ruby on Rails架构，在Web设计中运用了大量的JavaScript、AJAX、HTML5等技术，支持对使用Markdown等标记语言的内容进行渲染和显示等。关注细节使得GitHub成为了项目托管领域的后起之秀。</p></li></ol><h1 id="_2-1-创建github账号" tabindex="-1">2.1. 创建GitHub账号 <a class="header-anchor" href="#_2-1-创建github账号" aria-label="Permalink to &quot;2.1. 创建GitHub账号&quot;">​</a></h1><p>GitHub的SSH服务支持OpenSSH格式的公钥认证，可以通过Linux、Mac OS X、或Cygwin下的<code>ssh-keygen</code>命令创建公钥/私钥对。命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ssh-keygen</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后根据提示在用户主目录下的<code>.ssh</code>目录中创建默认的公钥/私钥对文件，其中<code>~/.ssh/id_rsa</code>是私钥文件，<code>~/.ssh/id_rsa.pub</code>是公钥文件。注意私钥文件要严加保护，不能泄露给任何人。如果在执行<code>ssh-keygen</code>命令时选择了使用口令保护私钥，私钥文件是经过加密的。至于公钥文件<code>~/.ssh/id_rsa.pub</code>则可以放心地公开给他人。</p><p>也可以用<code>ssh-keygen</code>命令以不同的名称创建多个公钥，当拥有多个GitHub账号时，非常重要。这是因为虽然一个GitHub账号允许使用多个不同的SSH公钥，但反过来，一个SSH公钥只能对应于一个GitHub账号。下面的命令在<code>~/.ssh</code>目录下创建名为<code>gotgithub</code>的私钥和名为<code>gotgithub.pub</code>的公钥文件。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ssh-keygen -C &quot;xxx@gmail.com&quot; -f ~/.ssh/xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当生成的公钥/私钥对不在缺省位置（<code>~/.ssh/id_rsa</code>等）时，使用<code>ssh</code>命令连接远程主机时需要使用参数<code>-i &lt;filename&gt;</code>指定公钥/私钥对。或者在配置文件<code>~/.ssh/config</code>中针对相应主机进行设定。例如对于上例创建了非缺省公钥/私钥对<code>~/.ssh/gotgithub</code>，可以在<code>~/.ssh/config</code>配置文件中写入如下配置。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Host github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">  User git</span></span>
<span class="line"><span style="color:#A6ACCD;">  Hostname github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">  PreferredAuthentications publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">  IdentityFile ~/.ssh/xxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>好了，有了上面的准备，就将<code>~/.ssh/gotgithub.pub</code>文件内容拷贝到剪切板。公钥是一行长长的字符串，若用编辑器打开公钥文件会折行显示，注意拷贝时切莫在其中插入多余的换行符、空格等，否则在公钥认证过程因为服务器端和客户端公钥不匹配而导致认证失败。命令行下可直接用<code>pbcopy</code>命令[<a href="#id4">2]</a>将文件内容拷贝到剪切板以避免拷贝错误：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ cat ~/.ssh/xxxx.pub | pbcopy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置成功后，再用<code>ssh</code>命令访问GitHub，会显示一条认证成功信息并退出。在认证成功的信息中还会显示该公钥对应的用户名。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ssh -T git@github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">Hi gotgithub! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果您未能看到类似的成功信息，可以通过在<code>ssh</code>命令后面添加<code>-v</code>参数加以诊断，会在冗长的会话中看到认证所使用的公钥文件等信息。然后比对所使用的公钥内容是否和GitHub账号中设置的相一致。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ssh -Tv git@github.com</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">debug1: Authentications that can continue: publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">debug1: Next authentication method: publickey</span></span>
<span class="line"><span style="color:#A6ACCD;">debug1: Offering RSA public key: /Users/jiangxin/.ssh/gotgithub</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">debug1: Entering interactive session.</span></span>
<span class="line"><span style="color:#A6ACCD;">Hi gotgithub! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>账号设置的最后一项是向GitHub提供你的求职信息。GitHub作为一个优秀程序员的聚集地，已成为一个IT人才招聘的途径，如果你需要找工作的话，提供简历并打开“Available for hire”选项，GitHub会向你推荐合适的工作机会。如图2-9所示。</p>`,20),l=[t];function p(o,c,r,u,b,d){return e(),a("div",null,l)}const A=s(i,[["render",p]]);export{g as __pageData,A as default};

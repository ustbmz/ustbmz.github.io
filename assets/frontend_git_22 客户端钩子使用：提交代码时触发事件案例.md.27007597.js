import{_ as s,o as a,c as e,U as n}from"./chunks/framework.76b79cb5.js";const l="/assets/5e9d46c6000134cd06890129.98fe993f.png",p="/assets/5e9d46ce0001512f06890265.eb517b5f.png",t="/assets/5e9d46d40001fc3606680146.eb6b42e4.png",o="/assets/5e9d46d90001da8006680214.77440563.png",c="/assets/5e9d46df0001a63006680129.60c7ede5.png",i="/assets/5e9d46e50001206609480078.834fdc5b.png",r="/assets/5e9d46ec0001ec5807310163.a3245a59.png",d="/assets/5e9d46fe0001599b07310265.d70a55f5.png",m="/assets/5e9d47060001636e07310265.2033fa90.png",b="/assets/5e9d470d0001e7e806400129.8b1f549f.png",u="/assets/5e9d47150001a62d06540333.a8aed81e.png",h="/assets/5e9d471d0001339e05350214.d1f05cf2.png",C="/assets/5e9d47230001374405350095.2d259739.png",g="/assets/5e9d472a0001fb6405350299.cdabffdc.png",G=JSON.parse('{"title":"22.客户端钩子","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/git/22 客户端钩子使用：提交代码时触发事件案例.md","filePath":"frontend/git/22 客户端钩子使用：提交代码时触发事件案例.md"}'),A={name:"frontend/git/22 客户端钩子使用：提交代码时触发事件案例.md"},y=n('<h1 id="_22-客户端钩子" tabindex="-1">22.客户端钩子 <a class="header-anchor" href="#_22-客户端钩子" aria-label="Permalink to &quot;22.客户端钩子&quot;">​</a></h1><p>有些时候，我们想在提交版本时候触发一些事件，触发事件的这个动作我们称之为钩子。 在 Git 中有两种类型的钩子，分别是客户端的和服务器端的。 客户端钩子主要是提交和合并这些的操作所调用，服务器端钩子主要是在接收被推送的提交这样的操作。</p><h2 id="_22-1-认识钩子" tabindex="-1">22.1 认识钩子 <a class="header-anchor" href="#_22-1-认识钩子" aria-label="Permalink to &quot;22.1 认识钩子&quot;">​</a></h2><p>Git 客户端钩子存储在 <code>.git/hooks</code> 目录中，在你初始化一个 Git 仓库时候这个目录便会产生，同时还会在里面放一些示例脚本，这些脚本都是以<code>.sample</code>结尾，我们可以使用 ls 命令查看一下，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ls .git/hooks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>ls</code>命令执行之后，返回的文件列表如下图所示： <img src="'+l+'" alt="图片描述"> 在上图中可以看出，有很多个钩子示例文件，这些钩子分别会在不同的事件中被触发，在下面会详细介绍每个钩子的触发时机。</p><h3 id="_22-1-1-钩子语法" tabindex="-1">22.1.1 钩子语法 <a class="header-anchor" href="#_22-1-1-钩子语法" aria-label="Permalink to &quot;22.1.1 钩子语法&quot;">​</a></h3><p>示例钩子都是<code>shell</code>脚本，部分钩子示例混杂了 Perl 代码，不过只要命名正确的可执行脚本都可以使用，比如 Python 或其它语言编写，我们可以使用<code>cat</code>命令查看一个示例钩子，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cat .git/hooks/pre-commit.sample</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的示例代码如下图所示： <img src="'+p+'" alt="图片描述"> 在上图中，可以看出一些钩子备注信息，以及示例代码。</p><h3 id="_22-1-2-钩子触发" tabindex="-1">22.1.2 钩子触发 <a class="header-anchor" href="#_22-1-2-钩子触发" aria-label="Permalink to &quot;22.1.2 钩子触发&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">钩子名字</th><th style="text-align:left;">触发时间</th></tr></thead><tbody><tr><td style="text-align:left;">pre-commit</td><td style="text-align:left;">执行<code>git commit</code>命令完成前被执行。</td></tr><tr><td style="text-align:left;">prepare-commit-msg</td><td style="text-align:left;">在执行完<code>pre-commit</code>钩子之后被调用。</td></tr><tr><td style="text-align:left;">commit-msg</td><td style="text-align:left;"><code>git commit</code>执行完成后被调用。</td></tr><tr><td style="text-align:left;">post-commit</td><td style="text-align:left;"><code>post-commit</code>钩子在<code>commit-msg</code>钩子之后立即被运行 。</td></tr><tr><td style="text-align:left;">post-checkout</td><td style="text-align:left;"><code>post-checkout</code>钩子在使用<code>git checkout</code>命令时候会被调用。</td></tr><tr><td style="text-align:left;">pre-rebase</td><td style="text-align:left;"><code>pre-rebase</code>钩子在使用<code>git rebase</code>命令发生更改之前运行</td></tr><tr><td style="text-align:left;">pre-receive</td><td style="text-align:left;"><code>pre-receive</code>钩子在有人用<code>git push</code>向仓库推送代码时被执行。</td></tr><tr><td style="text-align:left;">update</td><td style="text-align:left;"><code>update</code>钩子在<code>pre-receive</code>之后被调用，分别被每个推送上来的引用分别调用。</td></tr><tr><td style="text-align:left;">post-receive</td><td style="text-align:left;">在成功推送后被调用，适合用于发送通知。</td></tr></tbody></table><h3 id="_22-1-3-钩子试验" tabindex="-1">22.1.3 钩子试验 <a class="header-anchor" href="#_22-1-3-钩子试验" aria-label="Permalink to &quot;22.1.3 钩子试验&quot;">​</a></h3><p>在简单了解 Git 钩子之后，我们先来简单的触发一个钩子，做个试验，实验非常简单，把一个正确命名且可执行的文件放入 Git 目录下的 hooks 子目录中，并且对应相应的文件名即可，如果触发便成功。</p><p>我们选择使用<code>pre-commit</code>进行测试，这个钩子是在执行命令<code>git commit</code>时所触发，使用<code>vim</code>编写钩子，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim .git/hooks/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，我们在文本框中输入<code>echo 1111111111111</code>，如下图所示： <img src="'+t+'" alt="图片描述"> 代码写完之后，我们使用<code>:x</code>进行保存，保存完毕之后需要保证钩子有运行权限，因此还需要修改钩子的权限，为了避免权限没给对，这里我直接给出<code>777</code>权限，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">chmod 777 .git/hooks/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>钩子准备完毕之后，我们添加一个文件，然后使用<code>git commit</code>提交到新版本，首先添加一个文件，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo 111111 &gt; aa.txt  &amp;&amp; git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的信息如下图所示： <img src="'+o+'" alt="图片描述"> 在上图中可以看出，添加文件已经成功，接下来就可以使用<code>git commit</code>命令进行提交，用来验证钩子是否触发，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>提交新版本命令执行之后，返回信息如下所示： <img src="'+c+'" alt="图片描述"> 在上图中，我们看到输出的信息里面比以往多出了<code>111111111111</code>的提示，说明我们的钩子事件已经成功的被执行。</p><h2 id="_22-2-钩子案例" tabindex="-1">22.2 钩子案例 <a class="header-anchor" href="#_22-2-钩子案例" aria-label="Permalink to &quot;22.2 钩子案例&quot;">​</a></h2><p>前面虽然我们演示了一个钩子被执行，但并没有看到钩子到底如何帮助我们提高工作效率，这里用一个“代码风格检测”的示例做演示。</p><h3 id="_22-2-1-使用场景" tabindex="-1">22.2.1 使用场景 <a class="header-anchor" href="#_22-2-1-使用场景" aria-label="Permalink to &quot;22.2.1 使用场景&quot;">​</a></h3><p>平常我们团队以 PHP 开发为主，每个人使用的编辑器并不一致，代码风格各不相同，这样当我们来看别人代码的时候就会相对吃力，为了让大家代码风格能保持一致，我们使用了 Git 钩子作为辅助，当我们提交新版本时候，会自动检测我们代码的风格。如果风格符合<code>PSR-2</code>，则通过；如果不符合，给出具体行数和相对应的提示。</p><h3 id="_22-2-2-环境依赖" tabindex="-1">22.2.2 环境依赖 <a class="header-anchor" href="#_22-2-2-环境依赖" aria-label="Permalink to &quot;22.2.2 环境依赖&quot;">​</a></h3><p>下面我们来实现这样一个功能，在我们这个功能中依赖了两个组件<code>phpcs</code>和<code>composer</code>，其实最主要是<code>phpcs</code>，但是按照它最简单的方式是通过<code>composer</code>，所以我们先来安装 composer，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">php -r &quot;copy(&#39;https://install.phpcomposer.com/installer&#39;, &#39;composer-setup.php&#39;);&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，会下载一个 PHP 文件下来，如下图所示： <img src="'+i+'" alt="图片描述"> 在上图中，我们可以看到 PHP 文件已经被下载下来，接着我们使用 PHP 去执行这个 PHP 文件（一定要安装 PHP 才可以），用来安装<code>composer</code>，执行的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">php composer-setup.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的信息如下图所示 <img src="'+r+'" alt="图片描述"> 在上图中，我们看到命令已经执行完毕，并返回了绿色的提示信息告知我们已经成功执行，接着我们就可以通过<code>composer</code>来安装<code>phpcs</code>了，安装<code>phpcs</code>的命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">php composer.phar global require &quot;squizlabs/php_codesniffer=*&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令成功执行之后，我们需要先验证<code>phpcs</code>是否确认安装成功，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">~/.composer/vendor/bin/phpcs --help</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的信息如下所示： <img src="'+d+'" alt="图片描述"> 在上图中我们可以看到 phpcs 的一些使用参数，说明<code>phpcs</code>安装成功了，到此我们所依赖的工具都好了，接下来就可以开始编写钩子代码了。</p><h3 id="_22-2-3-钩子编写" tabindex="-1">22.2.3 钩子编写 <a class="header-anchor" href="#_22-2-3-钩子编写" aria-label="Permalink to &quot;22.2.3 钩子编写&quot;">​</a></h3><p>因为我对<code>shell</code>代码不如<code>Python</code>熟练，所以这里我简单编写了一段<code>Python</code>代码，代码中都包含了注释，这里可以使用<code>vim</code>去编写，也可以使用你的代码编辑器去，我这里以 vim 作为演示，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim .git/hooks/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，就可以在里面编写钩子代码了，我编写的代码如下图所示： <img src="'+m+`" alt="图片描述"> 在图中，可以看到第一行中声明了以<code>Python3</code>去执行下面的代码，完整代码如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#A6ACCD;">#!/usr/local/bin/python3</span></span>
<span class="line"><span style="color:#A6ACCD;">import os</span></span>
<span class="line"><span style="color:#A6ACCD;">import sys</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 获取文件内容</span></span>
<span class="line"><span style="color:#A6ACCD;">def file_get_content(path):</span></span>
<span class="line"><span style="color:#A6ACCD;">    with open(path, &quot;r&quot;) as f:</span></span>
<span class="line"><span style="color:#A6ACCD;">        ftextlist = f.read()  # 也是一次性读全部，但每一行作为一个子句存入一个列表</span></span>
<span class="line"><span style="color:#A6ACCD;">    return ftextlist</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 获取路径拼接命令</span></span>
<span class="line"><span style="color:#A6ACCD;">codePath = os.getcwd()</span></span>
<span class="line"><span style="color:#A6ACCD;">tempPath = &quot;/tmp/shellresult&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">cmd = &quot;cd %s &amp;&amp; git diff HEAD^..HEAD --stat   &gt; %s&quot; % (codePath, tempPath)</span></span>
<span class="line"><span style="color:#A6ACCD;">phpcsPath = &quot;/Users/song/.composer/vendor/bin/phpcs&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 执行后获取改动的文件列表</span></span>
<span class="line"><span style="color:#A6ACCD;">result = os.system(cmd)</span></span>
<span class="line"><span style="color:#A6ACCD;">ftextlist = file_get_content(tempPath).strip()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 字符串分割将每个文件做一个元素</span></span>
<span class="line"><span style="color:#A6ACCD;">ftextlist = ftextlist.split(&quot;\\n&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">fileList = []</span></span>
<span class="line"><span style="color:#A6ACCD;">for value in ftextlist:</span></span>
<span class="line"><span style="color:#A6ACCD;">    # 通过字符串分割，获取文件名和其他信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    tempArr = value.split(&#39; &#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    # 如果路径中不包含.php字符，说明不是php文件，过滤它</span></span>
<span class="line"><span style="color:#A6ACCD;">    if &#39;.php&#39; not in tempArr[0]:</span></span>
<span class="line"><span style="color:#A6ACCD;">        continue</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    # 拼接路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    fullPath = os.path.join(codePath, tempArr[0])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    # 执行phpcs命令</span></span>
<span class="line"><span style="color:#A6ACCD;">    cmd = &quot;%s %s &gt; %s&quot; % (phpcsPath, fullPath, tempPath)</span></span>
<span class="line"><span style="color:#A6ACCD;">    resultCode = os.system(cmd)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    #错误执行返回的状态码不等于0,说明有异常,状态码便输出非0</span></span>
<span class="line"><span style="color:#A6ACCD;">    if int(resultCode) != 0:</span></span>
<span class="line"><span style="color:#A6ACCD;">        print(file_get_content(tempPath))</span></span>
<span class="line"><span style="color:#A6ACCD;">        sys.exit(1)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#r如果上面都正常，则输出0，告诉Git代码正常</span></span>
<span class="line"><span style="color:#A6ACCD;">sys.exit(0)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>代码编写结束后，需要经过反复测试，上面的代码我已测试可以使用。接下来我们将做一个小实验来验证这段代码和钩子搭配起来的可用性。</p><h2 id="_22-3-效果验证" tabindex="-1">22.3 效果验证 <a class="header-anchor" href="#_22-3-效果验证" aria-label="Permalink to &quot;22.3 效果验证&quot;">​</a></h2><p>现在我需要这样去测试，首先修改一个 PHP 文件，然后用错误的风格去编写，然后提交，如果提交不通过说明我们的钩子起了效果；接着再以正确风格的代码进行测试，如果提交通过说明我们的正向测试通过。</p><h3 id="_22-3-1-反向测试" tabindex="-1">22.3.1 反向测试 <a class="header-anchor" href="#_22-3-1-反向测试" aria-label="Permalink to &quot;22.3.1 反向测试&quot;">​</a></h3><p>现在我们首先修改一个 PHP 文件，因为钩子事件里面我过滤了其他后缀，使用<code>vim</code>编写一段简单的 PHP 代码，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vim index.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，终端的展示信息如下： <img src="`+b+`" alt="图片描述"> 在上图中我们可以看到我们的<code>{</code>没有换行，这是不符合PHP中<code>PSR-2</code>风格的，为了方便大家做测试，我把代码贴到下面，如下代码所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;?php</span></span>
<span class="line"><span style="color:#A6ACCD;">function  test(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    echo 123;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>代码编写完毕之后，我们使用 Git 的<code>git commit</code>命令进行提交到新版本中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;phpcs测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示： <img src="`+u+'" alt="图片描述"> 在图中可以看到 Git 没有给返回新版本的信息，而是给出了<code>index.php</code>文件的风格不符合规则信息，里面有错误等级，错误原因等详细信息，说明我们编写的钩子事件是成功的，为了验证没有提交到新版本，我们可以通过<code>git log</code>命令来查看版本记录，执行命令如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行之后，返回的版本列表信息如下图所示： <img src="'+h+`" alt="图片描述"></p><p>在上图当中，我们可以看到我们刚才提交的备注信息并没有进来，因此可以确实被钩子事件给阻止了；</p><h3 id="_22-3-2-正向测试" tabindex="-1">22.3.2 正向测试 <a class="header-anchor" href="#_22-3-2-正向测试" aria-label="Permalink to &quot;22.3.2 正向测试&quot;">​</a></h3><p>接下来我们正向验证，当代码风格符合<code>PSR-2</code>的时候，钩子是否会阻止我们提交到新版本，现在我依然通过<code>vim</code>命令，将<code>index.php</code>文件里面的代码替换成如下代码，参考代码如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;?php</span></span>
<span class="line"><span style="color:#A6ACCD;">function test()</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    echo 123;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>将代码替换完成并保存之后，我们再次提交修改到新版本当中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add . &amp;&amp; git commit . -m &#39;phpcs测试&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示： <img src="`+C+'" alt="图片描述"> 在上图当中我们看到 Git 给出了提交成功的信息，提示一个文件被更改，增加了两行内容等信息，我们同样再次通过<code>git log</code>来验证是否成功提交到新版本中，执行命令如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令执行完毕之后，返回的信息如下图所示： <img src="'+g+'" alt="图片描述"></p><p>在上图中可以看到我们刚才提交的版本已经在版本记录列表中了，说明正向测试也通过。</p><h2 id="_22-4-小结" tabindex="-1">22.4 小结 <a class="header-anchor" href="#_22-4-小结" aria-label="Permalink to &quot;22.4 小结&quot;">​</a></h2><p>在这节中主要认识了 Git 的客户端钩子，包括钩子的使用方法，支持语法，使用场景等，我们需要记住以下几点：</p><ol><li>客户端钩子存放目录位于<code>.git/hooks</code>下，需要有运行权限才会被触发；</li><li>钩子支持多种语言，默认为了shell脚本，也可以指定<code>Python</code>或其他语言。</li></ol>',68),_=[y];function v(f,D,P,x,k,q){return a(),e("div",null,_)}const H=s(A,[["render",v]]);export{G as __pageData,H as default};
